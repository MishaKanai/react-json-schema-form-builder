{"version":3,"sources":["../../src/formBuilder/checkbox/FBCheckbox.js","../../src/formBuilder/FontAwesomeIcon.js","../../src/formBuilder/Collapse/Collapse.js","../../src/formBuilder/radio/FBRadioButton.js","../../src/formBuilder/radio/FBRadioGroup.js","../../src/formBuilder/Tooltip.js","../../src/formBuilder/utils.js","../../src/formBuilder/dependencies/DependencyWarning.js","../../src/formBuilder/dependencies/CardSelector.js","../../src/formBuilder/CardEnumOptions.js","../../src/formBuilder/dependencies/ValueSelector.js","../../src/formBuilder/dependencies/DependencyPossibility.js","../../src/formBuilder/dependencies/DependencyField.js","../../src/formBuilder/CardModal.js","../../src/formBuilder/GeneralParameterInputs.js","../../src/formBuilder/CardGeneralParameterInputs.js","../../src/formBuilder/Add.js","../../src/formBuilder/Card.js","../../src/formBuilder/defaults/defaultInputs.js","../../src/formBuilder/Section.js","../../src/formBuilder/styles.js","../../src/formBuilder/defaults/shortAnswerInputs.js","../../src/formBuilder/defaults/longAnswerInputs.js","../../src/formBuilder/defaults/numberInputs.js","../../src/formBuilder/defaults/arrayInputs.js","../../src/formBuilder/defaults/defaultFormInputs.js","../../src/formBuilder/FormBuilder.js","../../src/formBuilder/CardGallery.js","../../src/formBuilder/PredefinedGallery.js","tabs/Tabs.js","ErrorBoundary.js","JsonSchemaFormSuite.js","PlaygroundContainer.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","createUseStyles","checkbox","display","marginRight","FBCheckbox","onChangeValue","value","isChecked","label","use","disabled","id","dataTest","labelClassName","classjss","classes","classnames","potentialCheckboxId","checkboxId","data-test","className","type","onChange","checked","htmlFor","undefined","FontAwesomeIcon","otherProps","collapseElement","cursor","marginTop","padding","fontSize","marginLeft","Collapse","props","disableToggle","onClick","icon","faCaretRight","React","isOpen","FBRadioButton","name","required","autoFocus","useState","Math","key","radio","marginBottom","height","verticalAlign","FBRadioGroup","options","defaultValue","horizontal","option","index","typeMap","alert","help","faQuestionCircle","toolTip","color","Example","text","style","textDecoration","href","autohide","placement","target","parse","JSON","stringify","obj","categoryType","allFormInputs","generateCategoryHash","categoryHash","Object","formInput","match","hash","Error","getCardCategory","currentHash","cardProps","category","console","supportedPropertyParameters","Set","supportedUiParameters","checkForUnsupportedFeatures","unsupportedFeatures","widgets","fields","Array","supportedWidgets","supportedFields","supportedOptions","schema","property","uischema","propDefined","parameter","grouping","element","includes","uiProp","checkObjectForUnsupportedFeatures","generateElement","uiProps","newElement","elementDetails","dataProps","pathArr","definitionData","definitionUi","requiredNames","reservedKeys","generateElementPropsFromSchemas","parameters","elementDict","definedUiProps","group","possibilityIndex","children","possibility","requiredValues","cardPropList","remainder","elementArray","elementNames","elem","newElem","updateElementNames","countElementsFromSchema","schemaData","elementCount","generateSchemaElementFromElement","$ref","title","description","prop","generateSchemaFromElementProps","newSchema","dependencies","dependentElements","elementArr","oneOf","childrenComponents","properties","dependent","generateUiSchemaFromElementProps","uiSchema","uiOrder","definitions","uiOption","updateSchemas","newUiSchema","DEFAULT_INPUT_NAME","getIdFromElementsBlock","elements","names","defaultNameLength","Number","isNaN","addCardObj","mods","newElementObjArr","i","dataOptions","default","getNewElementDefaultDataOptions","uiOptions","propType","neighborNames","addSectionObj","generateElementComponentsFromSchemas","uiSchemaData","hideKey","path","cardOpenArray","setCardOpenArray","Card","Section","elementPropArr","expanded","elementProp","TypeSpecificParameters","getCardParameterInputComponentForType","componentProps","dependents","parent","newDataProps","newUiProps","propName","newCardObj","oldElement","onDelete","onMoveUp","tempBlock","onMoveDown","addElem","choice","cardOpen","setCardOpen","oldSection","onNameChange","newName","onRequireToggle","onDependentsChange","newDependents","reference","React.createElement","onDragEnd","details","src","result","dest","propagateElementChange","updatedElementArr","updatedChildren","propagateDefinitionChanges","excludeKeys","keysHash","keys","acc","getRandomId","chars","numberOfChars","length","DependencyWarning","elementId","definedVals","undefinedVals","CardSelector","possibleChoices","chosenChoices","placeholder","val","cardEnumOption","width","flexDirection","justifyContent","CardEnumOptions","initialValues","showNames","possibleValues","newVal","ev","parseFloat","parseInt","ValueSelector","parentEnums","parentType","parentName","parentSchema","enumType","enum","enumArr","combination","string","oldCombo","number","array","error","object","newCase","propArr","newEnum","DependencyPossibility","dependencyField","textAlign","border","borderRadius","margin","DependencyField","valueBased","checkIfValueBasedDependency","selection","cardModal","paddingTop","paddingBottom","CardModal","onClose","componentPropsState","setComponentProps","GeneralParameterInputs","CardBody","getCardBody","CardGeneralParameterInputs","showObjectNameInput","keyState","setKeyState","titleState","setTitleState","descriptionState","setDescriptionState","categoryMap","categoryNameMap","categoryToNameMap","fetchLabel","labelName","objectNameLabel","displayNameLabel","descriptionLabel","inputTypeLabel","onBlur","definitionsInSchema","inputKeys","array2","array1","subtractArray","availableInputTypes","newCategory","newProps","defaultUiProps","defaultDataProps","firstDefinition","addDetails","borderBottom","Add","hidden","popoverOpen","setPopoverOpen","createChoice","setCreateChoice","toggle","cardEntries","backgroundColor","fontWeight","cardInteractions","modalOpen","setModalOpen","toggleCollapse","CardDefaultParameterInputs","MultipleChoice","enumArray","containsUnparsableString","containsString","isNumber","setIsNumber","enumNames","newNum","newEnumNames","defaultInputs","time","displayName","matchIf","types","format","defaultDataSchema","defaultUiSchema","cardBody","modalBody","ref","widget","dropdown","sectionContainer","borderTop","elementNum","defaultCollapseStates","keyName","setKeyName","readOnly","message","droppableId","providedDroppable","innerRef","draggableId","providedDraggable","newComponentProps","arrows","float","formatDictionary","email","hostname","uri","regex","autoDictionary","username","password","country","CardShortAnswerParameterInputs","minLength","maxLength","rel","pattern","shortAnswerInput","shortAnswer","longAnswerInput","longAnswer","CardNumberParameterInputs","multipleOf","exclusiveMinimum","minimum","newMin","exclusiveMaximum","maximum","newMax","NumberField","numberInputs","integer","CardArrayParameterInputs","minItems","maxItems","getInnerCardComponent","defaultFormInputs","items","item","newArr","DEFAULT_FORM_INPUTS","formBuilder","formHead","formBody","maxHeight","overflowY","minWidth","cssFloat","formFooter","FormBuilder","CardGallery","definitionSchema","definitionUiSchema","componentArr","oldUi","newUi","newDefinitions","preDefinedGallery","PredefinedGallery","references","findRefs","schemaObject","referenceSet","portalTabs","position","Tabs","defaultActiveTab","tabs","withSeparator","preventRerender","activeTab","setActiveTab","Nav","map","NavItem","NavLink","active","TabContent","content","TabPane","tabId","ErrorBoundary","state","hasError","this","setState","errorMessage","toString","onErr","errMessage","Component","Form","withTheme","Bootstrap4Theme","checkError","language","data","e","JsonSchemaFormEditor","formData","formToggle","outputToggle","schemaFormErrorFlag","validFormInput","editorWidth","submissionData","err","schemaError","lang","schemaUiError","Alert","updateFormData","submitButtonMessage","onSubmit","Modal","ModalHeader","ModalBody","locale","ModalFooter","Button","updateSchema","json","updateUISchema","header","initialJsonSchema","initialUiSchema","PlaygroundContainer","setSchema","setUischema","JsonSchemaFormSuite","schemaTitle","uischemaTitle","App","Boolean","window","location","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.7ab62739.chunk.js","sourcesContent":["// @flow\n\nimport React from 'react';\nimport classnames from 'classnames';\nimport { createUseStyles } from 'react-jss';\n\nconst useStyles = createUseStyles({\n  checkbox: {\n    '& *': {\n      display: 'inline-block',\n    },\n    '& input': {\n      marginRight: '5px',\n    },\n  },\n});\n\ntype Props = {\n  onChangeValue: Function,\n  isChecked: boolean,\n  id?: string,\n  label?: string,\n  use?: string,\n  value?: string,\n  disabled?: boolean,\n  dataTest?: string,\n  labelClassName?: string,\n};\n\nconst FBCheckbox = ({\n  onChangeValue,\n  value = '',\n  isChecked = false,\n  label = '',\n  use = 'action',\n  disabled = false,\n  id = '',\n  dataTest = '',\n  labelClassName = '',\n}: Props) => {\n  const classjss = useStyles();\n  const classes = classnames('fb-checkbox', {\n    'edit-checkbox': !disabled && use === 'edit',\n    'action-checkbox': !disabled && use === 'action',\n    'disabled-checked-checkbox': disabled && isChecked,\n    'disabled-unchecked-checkbox': disabled && !isChecked,\n  });\n  const potentialCheckboxId = id !== '' ? id : label;\n  const checkboxId = potentialCheckboxId !== '' ? potentialCheckboxId : null;\n  return (\n    <div data-test='checkbox' className={`${classes} ${classjss.checkbox}`}>\n      <input\n        type='checkbox'\n        id={checkboxId}\n        data-test={dataTest || undefined}\n        onChange={disabled ? () => {} : onChangeValue}\n        value={value}\n        disabled={disabled}\n        checked={isChecked}\n      />\n      <div className='checkbox-overlay'>\n        {label && (\n          <label htmlFor={checkboxId} className={labelClassName || undefined}>\n            {label}\n          </label>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default FBCheckbox;\n","// @flow\n\nimport React from 'react';\nimport classnames from 'classnames';\nimport { FontAwesomeIcon as FortAwesomeFontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nexport default function FontAwesomeIcon({\n  className,\n  ...otherProps\n}: {\n  [string]: any,\n}) {\n  return (\n    <FortAwesomeFontAwesomeIcon\n      className={classnames([className, 'fa'])}\n      {...otherProps}\n    />\n  );\n}\n","// @flow\n\nimport React from 'react';\nimport type { Node } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport { Collapse as RSCollapse } from 'reactstrap';\nimport classnames from 'classnames';\nimport { faCaretDown, faCaretRight } from '@fortawesome/free-solid-svg-icons';\nimport FontAwesomeIcon from '../FontAwesomeIcon';\n\nconst useStyles = createUseStyles({\n  collapseElement: {\n    '& .disabled': { '.toggle-collapse': { cursor: 'default' } },\n    '& h4': { marginTop: '7px', padding: '13px 10px 10px 10px' },\n    '& .toggle-collapse': {\n      fontSize: '2.3rem',\n      cursor: 'pointer',\n      marginLeft: '33px',\n      '& .fa-caret-right': {\n        marginRight: '9px',\n      },\n    },\n  },\n});\n\ntype Props = {\n  // Determines if the Collapse component is open\n  isOpen: boolean,\n  // Toggles the isOpen boolean between true and false\n  toggleCollapse: () => void,\n  // The title to display in the collapse header\n  title: Node,\n  // Anything to be rendered within the collapse\n  children: any,\n  // If true will gray out and disable */\n  disableToggle?: boolean,\n  className?: string,\n};\n\nconst Collapse = (props: Props) => {\n  const classes = classnames(\n    `collapse-element ${props.className || ''} ${useStyles().collapseElement}`,\n    {\n      disabled: props.disableToggle,\n    },\n  );\n\n  return (\n    <div className={classes}>\n      <div className='d-flex'>\n        <span className='toggle-collapse'>\n          <FontAwesomeIcon\n            onClick={!props.disableToggle ? props.toggleCollapse : () => {}}\n            icon={props.isOpen ? faCaretDown : faCaretRight}\n          />\n        </span>\n        <h4>{props.title}</h4>\n      </div>\n      <RSCollapse isOpen={props.isOpen}>\n        <div>{props.children}</div>\n      </RSCollapse>\n    </div>\n  );\n};\n\nexport default Collapse;\n","// @flow\n\nimport React, { useState } from 'react';\nimport classnames from 'classnames';\nimport type { Node } from 'react';\n\ntype Props = {\n  label: Node,\n  value?: any,\n  name?: string,\n  checked?: boolean,\n  required?: boolean,\n  disabled?: boolean,\n  autoFocus?: boolean,\n  onChange: (any) => void,\n};\n\nexport default function FBRadioButton(props: Props) {\n  const {\n    label,\n    value,\n    checked,\n    name,\n    onChange,\n    required,\n    disabled,\n    autoFocus,\n  } = props;\n  const [id] = useState(`radio-${Math.floor(Math.random() * 1000000)}`);\n  const classes = classnames('fb-radio-button', { disabled });\n  return (\n    <div className={classes} key={value}>\n      <input\n        id={id}\n        type='radio'\n        name={name}\n        value={value}\n        checked={checked}\n        required={required}\n        disabled={disabled}\n        autoFocus={autoFocus}\n        onChange={() => onChange(value)}\n      />\n      <label htmlFor={id}>{label}</label>\n    </div>\n  );\n}\n","// @flow\n\nimport React from 'react';\nimport classnames from 'classnames';\nimport { createUseStyles } from 'react-jss';\nimport type { Node } from 'react';\nimport FBRadioButton from './FBRadioButton';\n\nconst useStyles = createUseStyles({\n  radio: {\n    '& .fb-radio-button': {\n      display: 'block',\n      '& input[type=\"radio\"]': {\n        marginRight: '5px',\n        marginBottom: 0,\n        height: '1em',\n        verticalAlign: 'middle',\n      },\n      '& input[type=\"radio\"] + label': {\n        marginTop: 0,\n        marginBottom: 0,\n        verticalAlign: 'middle',\n      },\n    },\n  },\n});\n\ntype Props = {\n  options: Array<{ label: Node, value: string | number }>,\n  defaultValue?: any,\n  horizontal?: boolean,\n  id?: string,\n  required?: boolean,\n  disabled?: boolean,\n  autoFocus?: boolean,\n  onChange: (any) => void,\n};\n\nexport default function FBRadioGroup(props: Props) {\n  const {\n    options,\n    defaultValue,\n    onChange,\n    horizontal,\n    id,\n    autoFocus,\n    disabled,\n  } = props;\n  const name = Math.random().toString();\n  const classjss = useStyles();\n  const classes = classnames('fb-radio-group', {\n    horizontal,\n  });\n  return (\n    <div id={id} className={`${classes} ${classjss.radio}`}>\n      {options.map((option, index) => (\n        <FBRadioButton\n          value={option.value}\n          label={option.label}\n          id={id}\n          name={name}\n          key={option.value}\n          checked={option.value === defaultValue}\n          autoFocus={autoFocus && index === 1}\n          onChange={onChange}\n          disabled={disabled}\n        />\n      ))}\n    </div>\n  );\n}\n","// @flow\n\n/* eslint react/no-multi-comp: 0, react/prop-types: 0 */\nimport React from 'react';\nimport type { Node } from 'react';\nimport { UncontrolledTooltip } from 'reactstrap';\nimport { createUseStyles } from 'react-jss';\nimport {\n  faAsterisk,\n  faQuestionCircle,\n} from '@fortawesome/free-solid-svg-icons';\nimport FontAwesomeIcon from './FontAwesomeIcon';\n\nconst typeMap = {\n  alert: faAsterisk,\n  help: faQuestionCircle,\n};\n\nconst useStyles = createUseStyles({\n  toolTip: {\n    color: 'white',\n    'background-color': 'black',\n  },\n});\n\nexport default function Example({\n  text,\n  type,\n  id,\n}: {\n  text: Node,\n  type: 'alert' | 'help',\n  id: string,\n}) {\n  const classes = useStyles();\n\n  return (\n    <React.Fragment>\n      <span\n        style={{ textDecoration: 'underline', color: 'blue' }}\n        href='#'\n        id={id}\n      >\n        <FontAwesomeIcon icon={typeMap[type]} />\n      </span>\n      <UncontrolledTooltip\n        autohide={false}\n        className={classes.toolTip}\n        placement='top'\n        target={id}\n      >\n        {text}\n      </UncontrolledTooltip>\n    </React.Fragment>\n  );\n}\n","// @flow\nimport * as React from 'react';\nimport type {\n  CardProps,\n  ElementProps,\n  FormInput,\n  Mods,\n  DataOptions,\n} from './types';\n\n// parse in either YAML or JSON\nexport function parse(text: string) {\n  if (!text) return {};\n  return JSON.parse(text);\n}\n\n// stringify in either YAML or JSON\nexport function stringify(obj: any) {\n  if (!obj) return '{}';\n  return JSON.stringify(obj);\n}\n\nexport function defaultDataProps(\n  category: string,\n  allFormInputs: { [string]: FormInput },\n) {\n  return allFormInputs[category].defaultDataSchema;\n}\n\nexport function defaultUiProps(\n  category: string,\n  allFormInputs: { [string]: FormInput },\n) {\n  return allFormInputs[category].defaultUiSchema;\n}\nexport function categoryType(\n  category: string,\n  allFormInputs: { [string]: FormInput },\n) {\n  return allFormInputs[category].type;\n}\nexport function getCardBody(\n  category: string,\n  allFormInputs: { [string]: FormInput },\n) {\n  return (\n    (allFormInputs[category] && allFormInputs[category].cardBody) ||\n    (() => null)\n  );\n}\nexport function categoryToNameMap(\n  category: string,\n  allFormInputs: { [string]: FormInput },\n) {\n  const categoryNameMap = {};\n  Object.keys(allFormInputs).forEach((inputName) => {\n    categoryNameMap[inputName] = allFormInputs[inputName].displayName;\n  });\n  return categoryNameMap;\n}\n\nfunction updateElementNames(elementArray: Array<ElementProps>) {\n  const elementNames = elementArray.map((elem) => elem.name);\n  return elementArray.map((elem) => {\n    const newElem = elem;\n    newElem.neighborNames = elementNames;\n    return newElem;\n  });\n}\n\nexport function generateCategoryHash(allFormInputs: { [string]: FormInput }) {\n  const categoryHash = {};\n  Object.keys(allFormInputs).forEach((categoryName) => {\n    const formInput = allFormInputs[categoryName];\n    formInput.matchIf.forEach((match) => {\n      match.types.forEach((type) => {\n        const hash = `type:${type || ''};widget:${match.widget || ''};field:${\n          match.field || ''\n        };format:${match.format || ''};$ref:${\n          match.$ref ? 'true' : 'false'\n        };enum:${match.enum ? 'true' : 'false'}`;\n        if (categoryHash[hash]) {\n          throw new Error(`Duplicate hash: ${hash}`);\n        }\n        categoryHash[hash] = categoryName;\n      });\n    });\n  });\n\n  return categoryHash;\n}\n\n// determines a card's category based on it's properties\n// mostly useful for reading a schema for the first time\nexport function getCardCategory(\n  cardProps: CardProps,\n  categoryHash: { [string]: string },\n) {\n  const currentHash = `type:${cardProps.dataOptions.type || ''};widget:${\n    cardProps.uiOptions['ui:widget'] || ''\n  };field:${cardProps.uiOptions['ui:field'] || ''};format:${\n    cardProps.dataOptions.format || ''\n  };$ref:${cardProps.$ref !== undefined ? 'true' : 'false'};enum:${\n    cardProps.dataOptions.enum ? 'true' : 'false'\n  }`;\n  const category = categoryHash[currentHash];\n  if (!category) {\n    if (cardProps.$ref) return 'ref';\n    // eslint-disable-next-line no-console\n    console.error(`No match for card': ${currentHash} among set`);\n    return 'shortAnswer';\n  }\n  return category;\n}\n\n// check for unsupported feature in schema and uischema\nconst supportedPropertyParameters = new Set([\n  'title',\n  'description',\n  'enum',\n  'minLength',\n  'maxLength',\n  'multipleOf',\n  'minimum',\n  'maximum',\n  'format',\n  'exclusiveMinimum',\n  'exclusiveMaximum',\n  'type',\n  'default',\n  'pattern',\n  'required',\n  'properties',\n  'items',\n  'definitions',\n  '$ref',\n  'minItems',\n  'maxItems',\n  'enumNames',\n  'dependencies',\n  '$id',\n  '$schema',\n  'meta',\n]);\n\nconst supportedUiParameters = new Set([\n  'ui:order',\n  'ui:widget',\n  'ui:autofocus',\n  'ui:autocomplete',\n  'ui:options',\n  'ui:field',\n  'items',\n  'definitions',\n]);\n\n// recursively called function to check an object for unsupported features\nfunction checkObjectForUnsupportedFeatures(\n  schema: { [string]: any },\n  uischema: { [string]: any },\n  supportedWidgets: Set<string>,\n  supportedFields: Set<string>,\n  supportedOptions: Set<string>,\n) {\n  // add each unsupported feature to this array\n  const unsupportedFeatures = [];\n\n  // check for unsupported whole object features\n  if (schema && typeof schema === 'object')\n    Object.keys(schema).forEach((property) => {\n      if (\n        !supportedPropertyParameters.has(property) &&\n        property !== 'properties'\n      )\n        unsupportedFeatures.push(`Unrecognized Object Property: ${property}`);\n    });\n\n  if (uischema && typeof uischema === 'object')\n    Object.keys(uischema).forEach((uiProperty) => {\n      let propDefined = false;\n      // search for the property in the schema properties and dependencies\n      if (\n        schema.properties &&\n        Object.keys(schema.properties).includes(uiProperty)\n      )\n        propDefined = true;\n      if (schema.dependencies) {\n        Object.keys(schema.dependencies).forEach((dependencyKey) => {\n          Object.keys(schema.dependencies[dependencyKey]).forEach(\n            (parameter) => {\n              if (parameter === 'oneOf') {\n                schema.dependencies[dependencyKey].oneOf.forEach((grouping) => {\n                  if (grouping.properties)\n                    if (Object.keys(grouping.properties).includes(uiProperty))\n                      propDefined = true;\n                });\n              } else if (parameter === 'properties') {\n                if (\n                  Object.keys(\n                    schema.dependencies[dependencyKey].properties,\n                  ).includes(uiProperty)\n                )\n                  propDefined = true;\n              }\n            },\n          );\n        });\n      }\n\n      if (!propDefined && !supportedUiParameters.has(uiProperty))\n        unsupportedFeatures.push(\n          `Unrecognized UI schema property: ${uiProperty}`,\n        );\n    });\n\n  // check for unsupported property parameters\n  if (schema.properties)\n    Object.entries(schema.properties).forEach(\n      ([parameter, element]: [string, any]) => {\n        if (\n          element &&\n          typeof element === 'object' &&\n          element.type &&\n          element.type !== 'object'\n        ) {\n          // make sure that the type is valid\n          if (\n            !['array', 'string', 'integer', 'number', 'boolean'].includes(\n              element.type,\n            )\n          )\n            unsupportedFeatures.push(\n              `Unrecognized type: ${element.type} in ${parameter}`,\n            );\n          // check the properties of each property if it is a basic object\n          Object.keys(element).forEach((key) => {\n            if (!supportedPropertyParameters.has(key))\n              unsupportedFeatures.push(\n                `Property Parameter: ${key} in ${parameter}`,\n              );\n          });\n        } else {\n          // check the properties of each property if it is a basic object\n          Object.keys(element).forEach((key) => {\n            if (!supportedPropertyParameters.has(key))\n              unsupportedFeatures.push(\n                `Property Parameter: ${key} in ${parameter}`,\n              );\n          });\n        }\n\n        // check for unsupported UI components\n        if (\n          uischema &&\n          uischema[parameter] &&\n          element &&\n          (!element.type || element.type !== 'object')\n        ) {\n          // check for unsupported ui properties\n          Object.keys(uischema[parameter]).forEach((uiProp) => {\n            if (!supportedUiParameters.has(uiProp))\n              unsupportedFeatures.push(\n                `UI Property: ${uiProp} for ${parameter}`,\n              );\n\n            // check for unsupported ui widgets\n            if (\n              uiProp === 'ui:widget' &&\n              !supportedWidgets.has(uischema[parameter][uiProp])\n            ) {\n              unsupportedFeatures.push(\n                `UI Widget: ${uischema[parameter][uiProp]} for ${parameter}`,\n              );\n            }\n\n            // check for unsupported ui fields\n            if (\n              uiProp === 'ui:field' &&\n              !supportedFields.has(uischema[parameter][uiProp])\n            )\n              unsupportedFeatures.push(\n                `UI Field: ${uischema[parameter][uiProp]} for ${parameter}`,\n              );\n\n            // check unsupported ui option\n            if (uiProp === 'ui:options')\n              Object.keys(uischema[parameter]['ui:options']).forEach(\n                (uiOption) => {\n                  if (!supportedOptions.has(uiOption))\n                    unsupportedFeatures.push(\n                      `UI Property: ui:options.${uiOption} for ${parameter}`,\n                    );\n                },\n              );\n          });\n        }\n      },\n    );\n  return unsupportedFeatures;\n}\n\n// parent function that checks for unsupported features in an entire document\nexport function checkForUnsupportedFeatures(\n  schema: { [string]: any },\n  uischema: { [string]: any },\n  allFormInputs: { [string]: FormInput },\n) {\n  // add each unsupported feature to this array\n  const unsupportedFeatures = [];\n\n  const widgets = [];\n  const fields = [];\n  const options = [];\n  Object.keys(allFormInputs).forEach((inputType) => {\n    allFormInputs[inputType].matchIf.forEach((match) => {\n      if (match.widget && !widgets.includes(match.widget))\n        widgets.push(match.widget);\n      if (match.field && !fields.includes(match.field))\n        fields.push(match.field);\n    });\n    if (\n      allFormInputs[inputType].possibleOptions &&\n      Array.isArray(allFormInputs[inputType].possibleOptions)\n    ) {\n      options.push(...allFormInputs[inputType].possibleOptions);\n    }\n  });\n  const supportedWidgets = new Set(widgets);\n  const supportedFields = new Set(fields);\n  const supportedOptions = new Set(options);\n\n  // check for unsupported whole form features\n  if (schema && typeof schema === 'object' && schema.type === 'object') {\n    unsupportedFeatures.push(\n      ...checkObjectForUnsupportedFeatures(\n        schema,\n        uischema,\n        supportedWidgets,\n        supportedFields,\n        supportedOptions,\n      ),\n    );\n  } else {\n    unsupportedFeatures.push('jsonSchema form is not of type object');\n  }\n\n  return unsupportedFeatures;\n}\n\n// make an element out of the corresponding properties and UI properties\nfunction generateElement(\n  name: string,\n  dataProps: any,\n  uiProperties: any,\n  requiredNames: any,\n  definitionData?: { [string]: any },\n  definitionUi?: { [string]: any },\n  categoryHash: { [string]: string },\n) {\n  let uiProps = {\n    ...uiProperties,\n  };\n  const newElement = {};\n  let elementDetails =\n    dataProps && typeof dataProps === 'object' ? dataProps : {};\n\n  // populate newElement with reference if applicable\n  if (elementDetails.$ref !== undefined && definitionData) {\n    const pathArr =\n      typeof elementDetails.$ref === 'string'\n        ? elementDetails.$ref.split('/')\n        : [];\n    if (\n      pathArr[0] === '#' &&\n      pathArr[1] === 'definitions' &&\n      definitionData[pathArr[2]]\n    ) {\n      elementDetails = {\n        ...elementDetails,\n        ...definitionData[pathArr[2]],\n      };\n    }\n\n    const definedUiProps = (definitionUi || {})[pathArr[2]];\n    uiProps = {\n      ...(definedUiProps || {}),\n      ...uiProps,\n    };\n  }\n\n  newElement.name = name;\n  newElement.required = requiredNames.includes(name);\n  newElement.$ref =\n    typeof elementDetails.$ref === 'string' ? elementDetails.$ref : undefined;\n\n  if (elementDetails.type && elementDetails.type === 'object') {\n    // create a section\n    newElement.schema = elementDetails;\n    newElement.uischema = uiProps || {};\n    newElement.propType = 'section';\n  } else {\n    // create a card\n    newElement.dataOptions = elementDetails;\n    newElement.uiOptions = uiProps || {};\n\n    // ensure that uiOptions does not have duplicate keys with dataOptions\n    const reservedKeys = Object.keys(newElement.dataOptions);\n    Object.keys(newElement.uiOptions).forEach((uiKey) => {\n      if (reservedKeys.includes(uiKey)) {\n        newElement.uiOptions[`ui:*${uiKey}`] = newElement.uiOptions[uiKey];\n      }\n    });\n\n    newElement.dataOptions.category = getCardCategory(newElement, categoryHash);\n    newElement.propType = 'card';\n  }\n  return newElement;\n}\n\n// generate an array of element objects from a schema and uischema\nexport function generateElementPropsFromSchemas(parameters: {\n  schema: { [string]: any },\n  uischema: { [string]: any },\n  definitionData?: { [string]: any },\n  definitionUi?: { [string]: any },\n  categoryHash: { [string]: string },\n}) {\n  const { schema, uischema, definitionData, definitionUi, categoryHash } =\n    parameters;\n\n  if (!schema.properties) return [];\n\n  const elementDict = {};\n  const requiredNames = schema.required ? schema.required : [];\n\n  // read regular elements from properties\n  Object.entries(schema.properties).forEach(([parameter, element]) => {\n    const newElement = {};\n    let elementDetails =\n      element && typeof element === 'object'\n        ? (element: {\n            ...any,\n            $ref?: string,\n          })\n        : {};\n\n    // populate newElement with reference if applicable\n    if (elementDetails.$ref !== undefined && definitionData) {\n      if (\n        elementDetails.$ref &&\n        !elementDetails.$ref.startsWith('#/definitions')\n      )\n        throw new Error(\n          `Invalid definition, not at '#/definitions': ${elementDetails.$ref}`,\n        );\n      const pathArr =\n        elementDetails.$ref !== undefined ? elementDetails.$ref.split('/') : [];\n      if (\n        pathArr[0] === '#' &&\n        pathArr[1] === 'definitions' &&\n        definitionData[pathArr[2]]\n      ) {\n        elementDetails = {\n          ...definitionData[pathArr[2]],\n          ...elementDetails,\n        };\n      }\n\n      const definedUiProps = (definitionUi || {})[pathArr[2]];\n      uischema[parameter] = {\n        ...(definedUiProps || {}),\n        ...uischema[parameter],\n      };\n    }\n\n    newElement.name = parameter;\n    newElement.required = requiredNames.includes(parameter);\n    newElement.$ref = elementDetails.$ref;\n    newElement.dataOptions = elementDetails;\n\n    if (elementDetails.type && elementDetails.type === 'object') {\n      // create a section\n      newElement.schema = elementDetails;\n      newElement.uischema = uischema[parameter] || {};\n      newElement.propType = 'section';\n    } else {\n      // create a card\n      newElement.uiOptions = uischema[parameter] || {};\n\n      // ensure that uiOptions does not have duplicate keys with dataOptions\n      const reservedKeys = Object.keys(newElement.dataOptions);\n      Object.keys(newElement.uiOptions).forEach((uiKey) => {\n        if (reservedKeys.includes(uiKey)) {\n          newElement.uiOptions[`ui:*${uiKey}`] = newElement.uiOptions[uiKey];\n        }\n      });\n\n      newElement.dataOptions.category = getCardCategory(\n        newElement,\n        categoryHash,\n      );\n      newElement.propType = 'card';\n    }\n    elementDict[newElement.name] = newElement;\n  });\n  // read dependent elements from dependencies\n  if (schema.dependencies) {\n    Object.keys(schema.dependencies).forEach((parent) => {\n      const group = schema.dependencies[parent];\n      if (group.oneOf) {\n        let possibilityIndex = 0;\n        group.oneOf.forEach((possibility) => {\n          if (!elementDict[parent].dependents) {\n            elementDict[parent].dependents = [];\n          }\n          elementDict[parent].dependents.push({\n            children: [],\n            value: possibility.properties[parent],\n          });\n          const requiredValues = possibility.required || [];\n          Object.entries(possibility.properties).forEach(\n            ([parameter, element]) => {\n              // create a new element if not present in main properties\n              if (!Object.keys(elementDict).includes(parameter)) {\n                const newElement = generateElement(\n                  parameter,\n                  element,\n                  uischema[parameter],\n                  requiredNames,\n                  definitionData,\n                  definitionUi,\n                  categoryHash,\n                );\n                newElement.required = requiredValues.includes(newElement.name);\n                elementDict[newElement.name] = newElement;\n              }\n              if (parameter !== parent) {\n                const newElement = elementDict[parameter];\n                newElement.dependent = true;\n                newElement.parent = parent;\n                elementDict[parent].dependents[possibilityIndex].children.push(\n                  parameter,\n                );\n              }\n            },\n          );\n          possibilityIndex += 1;\n        });\n      } else if (group.properties) {\n        const requiredValues = group.required || [];\n        Object.entries(group.properties).forEach(([parameter, element]) => {\n          const newElement = generateElement(\n            parameter,\n            element,\n            uischema[parameter],\n            requiredNames,\n            definitionData,\n            definitionUi,\n            categoryHash,\n          );\n          newElement.required = requiredValues.includes(newElement.name);\n          newElement.dependent = true;\n          newElement.parent = parent;\n          elementDict[newElement.name] = newElement;\n          if (elementDict[parent].dependents) {\n            elementDict[parent].dependents[0].children.push(parameter);\n          } else {\n            elementDict[parent].dependents = [{ children: [parameter] }];\n          }\n        });\n      } else {\n        // eslint-disable-next-line no-console\n        console.error('unsupported dependency type encountered');\n      }\n    });\n  }\n\n  // now reorder in accordance with ui:order if defined\n  const cardPropList = [];\n  if (uischema['ui:order']) {\n    // in case there are any options not in ui:order\n    const remainder = [];\n    Object.keys(elementDict).forEach((name) => {\n      if (!uischema['ui:order'].includes(name))\n        remainder.push(elementDict[name]);\n    });\n\n    // map ui order elements into the right order\n    uischema['ui:order'].forEach((name) => {\n      // if contains the wildcard *, insert remainder cards there\n      if (name === '*') {\n        remainder.forEach((remCard) => {\n          cardPropList.push(remCard);\n        });\n      } else if (elementDict[name]) {\n        cardPropList.push(elementDict[name]);\n      }\n    });\n  } else {\n    Object.keys(elementDict).forEach((name) => {\n      cardPropList.push(elementDict[name]);\n    });\n  }\n\n  updateElementNames(cardPropList);\n  return (cardPropList: Array<ElementProps>);\n}\n\n// determine the number of element objects from schema and uischema\nexport function countElementsFromSchema(schemaData: any) {\n  if (!schemaData.properties) return 0;\n  const elementDict = {};\n  let elementCount = 0;\n\n  // read regular elements from properties\n  Object.entries(schemaData.properties).forEach(([parameter]) => {\n    elementDict[parameter] = {};\n    elementCount += 1;\n  });\n  // read dependent elements from dependencies\n  if (schemaData.dependencies) {\n    Object.keys(schemaData.dependencies).forEach((parent) => {\n      const group = schemaData.dependencies[parent];\n      if (group.oneOf) {\n        let possibilityIndex = 0;\n        group.oneOf.forEach((possibility) => {\n          if (!elementDict[parent].dependents) {\n            elementDict[parent].dependents = [];\n          }\n          elementDict[parent].dependents.push({\n            children: [],\n            value: possibility.properties[parent],\n          });\n          Object.entries(possibility.properties).forEach(([parameter]) => {\n            // create a new element if not present in main properties\n            if (!Object.keys(elementDict).includes(parameter)) {\n              elementDict[parameter] = {};\n              elementCount += 1;\n            }\n            if (parameter !== parent) {\n              const newElement = elementDict[parameter];\n              newElement.dependent = true;\n              newElement.parent = parent;\n              elementDict[parent].dependents[possibilityIndex].children.push(\n                parameter,\n              );\n            }\n          });\n          possibilityIndex += 1;\n        });\n      } else if (group.properties) {\n        Object.entries(group.properties).forEach(([parameter]) => {\n          elementDict[parameter] = {};\n          elementCount += 1;\n          if (elementDict[parent].dependents) {\n            elementDict[parent].dependents[0].children.push(parameter);\n          } else {\n            elementDict[parent].dependents = [{ children: [parameter] }];\n          }\n        });\n      } else {\n        // eslint-disable-next-line no-console\n        console.error('unsupported dependency type encountered');\n      }\n    });\n  }\n\n  return (elementCount: number);\n}\n\n// convert an element into a schema equivalent\nfunction generateSchemaElementFromElement(element: ElementProps) {\n  if (element.$ref !== undefined) {\n    return {\n      $ref: element.$ref,\n      title: element.dataOptions.title,\n      description: element.dataOptions.description,\n    };\n  } else if (element.propType === 'card') {\n    if (element.dataOptions.category === 'section') {\n      return {\n        type: 'object',\n      };\n    } else {\n      const prop = {};\n\n      Object.keys(element.dataOptions).forEach((key) => {\n        if (\n          ![\n            'category',\n            'hideKey',\n            'path',\n            'definitionData',\n            'definitionUi',\n            'allFormInputs',\n          ].includes(key) &&\n          element.dataOptions[key] !== ''\n        )\n          prop[key] = element.dataOptions[key];\n      });\n      return prop;\n    }\n  } else if (element.propType === 'section') {\n    return element.schema;\n  } else {\n    throw new Error('Element that is neither card, section, nor ref');\n  }\n}\n\n// generate a new schema from a complete array of card objects\nexport function generateSchemaFromElementProps(\n  elementArr: Array<ElementProps>,\n) {\n  if (!elementArr) return {};\n  const newSchema = {};\n\n  const props = {};\n  const dependencies = {};\n  const elementDict = {};\n  const dependentElements = new Set([]);\n  for (let index = 0; index < elementArr.length; index += 1) {\n    const element = elementArr[index];\n    elementDict[element.name] = { ...element };\n    if (element.dependents)\n      element.dependents.forEach((possibility) => {\n        possibility.children.forEach((dependentElement) => {\n          dependentElements.add(dependentElement);\n        });\n      });\n  }\n  Object.keys(elementDict).forEach((elementName) => {\n    const element = elementDict[elementName];\n    if (element.dependents && element.dependents[0]) {\n      if (element.dependents[0].value) {\n        // handle value based case\n        dependencies[elementName] = {\n          oneOf: element.dependents.map((possibility) => {\n            const childrenComponents = {};\n            const requiredValues = [];\n            possibility.children.forEach((child) => {\n              if (elementDict[child]) {\n                childrenComponents[child] = generateSchemaElementFromElement(\n                  elementDict[child],\n                );\n                if (elementDict[child].required) requiredValues.push(child);\n              }\n            });\n            return {\n              properties: {\n                [elementName]: possibility.value,\n                ...childrenComponents,\n              },\n              required: requiredValues,\n            };\n          }),\n        };\n      } else {\n        // handle definition based case\n        const childrenComponents = {};\n        const requiredValues = [];\n        element.dependents[0].children.forEach((child) => {\n          childrenComponents[child] = generateSchemaElementFromElement(\n            elementDict[child],\n          );\n          if (elementDict[child].required) requiredValues.push(child);\n        });\n        dependencies[elementName] = {\n          properties: childrenComponents,\n          required: requiredValues,\n        };\n      }\n    }\n    if (!dependentElements.has(elementName))\n      props[element.name] = generateSchemaElementFromElement(element);\n  });\n\n  newSchema.properties = props;\n  newSchema.dependencies = dependencies;\n  newSchema.required = elementArr\n    .filter(({ required, dependent }) => required && !dependent)\n    .map<string>(({ name }) => name);\n\n  return newSchema;\n}\n\nexport function generateUiSchemaFromElementProps(\n  elementArr: Array<ElementProps>,\n  definitionUi: any,\n) {\n  if (!elementArr) return {};\n\n  const uiSchema = {};\n  const uiOrder = [];\n  const definitions = definitionUi;\n\n  elementArr.forEach((element) => {\n    uiOrder.push(element.name);\n    if (element.$ref !== undefined) {\n      // look for the reference\n      const pathArr =\n        typeof element.$ref === 'string' ? element.$ref.split('/') : [];\n      if (definitions && definitions[pathArr[2]])\n        uiSchema[element.name] = definitions[pathArr[2]];\n    } else if (element.propType === 'card' && element.uiOptions) {\n      Object.keys(element.uiOptions).forEach((uiOption) => {\n        if (!uiSchema[element.name]) uiSchema[element.name] = {};\n        if (uiOption.startsWith('ui:*')) {\n          uiSchema[element.name][uiOption.substring(4)] =\n            element.uiOptions[uiOption];\n        } else {\n          uiSchema[element.name][uiOption] = element.uiOptions[uiOption];\n        }\n      });\n    } else if (element.propType === 'section' && element.uischema) {\n      uiSchema[element.name] = element.uischema;\n    }\n  });\n\n  uiSchema['ui:order'] = uiOrder;\n\n  return uiSchema;\n}\n\nexport function getCardParameterInputComponentForType(\n  category: string,\n  allFormInputs: { [string]: FormInput },\n) {\n  return (\n    (allFormInputs[category] && allFormInputs[category].modalBody) ||\n    (() => null)\n  );\n}\n\n// takes in an array of Card Objects and updates both schemas\nexport function updateSchemas(\n  elementArr: Array<ElementProps>,\n  parameters: {\n    schema: { [string]: any },\n    uischema: { [string]: any },\n    onChange: ({ [string]: any }, { [string]: any }) => any,\n    definitionData?: { [string]: any },\n    definitionUi?: { [string]: any },\n  },\n) {\n  const { schema, uischema, onChange, definitionUi } = parameters;\n  const definedUi = (uischema || {}).definitions\n    ? { definitions: uischema.definitions }\n    : {};\n  const newUiSchema = ({\n    ...definedUi,\n    ...generateUiSchemaFromElementProps(elementArr, definitionUi),\n  }: { [string]: any });\n  const newSchema = ({\n    ...schema,\n    ...generateSchemaFromElementProps(elementArr),\n  }: { [string]: any });\n\n  // mandate that the type is an object if not already done\n  newSchema.type = 'object';\n\n  onChange(newSchema, newUiSchema);\n}\n\nexport const DEFAULT_INPUT_NAME = 'newInput';\n\n// ensure that each added block has a unique name\nfunction getIdFromElementsBlock(elements: Array<ElementProps>) {\n  const names = elements.map((element) => element.name);\n  const defaultNameLength = DEFAULT_INPUT_NAME.length;\n\n  return names.length > 0\n    ? Math.max(\n        ...names.map((name) => {\n          if (name.startsWith(DEFAULT_INPUT_NAME)) {\n            const index = name.substring(defaultNameLength, name.length);\n            const value = Number.parseInt(index);\n\n            if (!isNaN(value)) {\n              return value;\n            }\n          }\n\n          return 0;\n        }),\n      ) + 1\n    : 1;\n}\n\n// given an initial schema, update with a new card appended\nexport function addCardObj(parameters: {\n  schema: { [string]: any },\n  uischema: { [string]: any },\n  mods?: Mods,\n  onChange: ({ [string]: any }, { [string]: any }) => any,\n  definitionData: { [string]: any },\n  definitionUi: { [string]: any },\n  index?: number,\n  categoryHash: { [string]: string },\n}) {\n  const {\n    schema,\n    uischema,\n    mods,\n    onChange,\n    definitionData,\n    definitionUi,\n    index,\n    categoryHash,\n  } = parameters;\n  const newElementObjArr = generateElementPropsFromSchemas({\n    schema,\n    uischema,\n    definitionData,\n    definitionUi,\n    categoryHash,\n  });\n\n  const i = getIdFromElementsBlock(newElementObjArr);\n  const dataOptions = getNewElementDefaultDataOptions(i, mods);\n\n  const newElement = ({\n    name: `${DEFAULT_INPUT_NAME}${i}`,\n    required: false,\n    dataOptions: dataOptions,\n    uiOptions: (mods && mods.newElementDefaultUiSchema) || {},\n    propType: 'card',\n    schema: {},\n    uischema: {},\n    neighborNames: [],\n  }: ElementProps);\n\n  if (index !== undefined && index !== null) {\n    newElementObjArr.splice(index + 1, 0, newElement);\n  } else {\n    newElementObjArr.push(newElement);\n  }\n  updateSchemas(newElementObjArr, {\n    schema,\n    uischema,\n    definitionData,\n    definitionUi,\n    onChange,\n  });\n}\n\n// given an initial schema, update with a new section appended\nexport function addSectionObj(parameters: {\n  schema: { [string]: any },\n  uischema: { [string]: any },\n  onChange: ({ [string]: any }, { [string]: any }) => any,\n  definitionData: { [string]: any },\n  definitionUi: { [string]: any },\n  index?: number,\n  categoryHash: { [string]: string },\n}) {\n  const {\n    schema,\n    uischema,\n    onChange,\n    definitionData,\n    definitionUi,\n    index,\n    categoryHash,\n  } = parameters;\n  const newElementObjArr = generateElementPropsFromSchemas({\n    schema,\n    uischema,\n    definitionData,\n    definitionUi,\n    categoryHash,\n  });\n\n  const i = getIdFromElementsBlock(newElementObjArr);\n\n  const newElement = ({\n    name: `${DEFAULT_INPUT_NAME}${i}`,\n    required: false,\n    dataOptions: {\n      title: `New Input ${i}`,\n      type: 'object',\n      default: '',\n    },\n    uiOptions: {},\n    propType: 'section',\n    schema: { title: `New Input ${i}`, type: 'object' },\n    uischema: {},\n    neighborNames: [],\n  }: ElementProps);\n\n  if (index !== undefined && index !== null) {\n    newElementObjArr.splice(index + 1, 0, newElement);\n  } else {\n    newElementObjArr.push(newElement);\n  }\n  updateSchemas(newElementObjArr, {\n    schema,\n    uischema,\n    definitionData,\n    definitionUi,\n    onChange,\n  });\n}\n\n// generate an array of Card and Section components from a schema\nexport function generateElementComponentsFromSchemas(parameters: {\n  schemaData: { [string]: any },\n  uiSchemaData: { [string]: any },\n  onChange: ({ [string]: any }, { [string]: any }) => any,\n  definitionData?: { [string]: any },\n  definitionUi?: { [string]: any },\n  hideKey?: boolean,\n  path: string,\n  cardOpenArray: Array<boolean>,\n  setCardOpenArray: (newArr: Array<boolean>) => void,\n  allFormInputs: { [string]: FormInput },\n  mods?: Mods,\n  categoryHash: { [string]: string },\n  Card: React.AbstractComponent<{ [string]: any }>,\n  Section: React.AbstractComponent<{ [string]: any }>,\n}) {\n  const {\n    schemaData,\n    uiSchemaData,\n    onChange,\n    definitionData,\n    definitionUi,\n    hideKey,\n    path,\n    cardOpenArray,\n    setCardOpenArray,\n    allFormInputs,\n    mods,\n    categoryHash,\n    Card,\n    Section,\n  } = parameters;\n\n  const schema = parse(stringify(schemaData));\n  const uischema = parse(stringify(uiSchemaData));\n\n  if (!schema.properties) return [];\n  const elementPropArr = generateElementPropsFromSchemas({\n    schema,\n    uischema,\n    definitionData,\n    definitionUi,\n    categoryHash,\n  });\n\n  const elementList = elementPropArr.map<React.Node>((elementProp, index) => {\n    const expanded =\n      (cardOpenArray && index < cardOpenArray.length && cardOpenArray[index]) ||\n      false;\n    if (elementProp.propType === 'card') {\n      // choose the appropriate type specific parameters\n      const TypeSpecificParameters = getCardParameterInputComponentForType(\n        elementProp.dataOptions.category || 'string',\n        allFormInputs,\n      );\n\n      // add a fully defined card component to the list of components\n      return (\n        <Card\n          componentProps={{\n            name: elementPropArr[index].name,\n            required: elementPropArr[index].required,\n            hideKey,\n            path: `${path}_${elementPropArr[index].name}`,\n            definitionData,\n            definitionUi,\n            neighborNames: elementPropArr[index].neighborNames,\n            dependents: elementPropArr[index].dependents,\n            dependent: elementPropArr[index].dependent,\n            parent: elementPropArr[index].parent,\n            ...elementPropArr[index].uiOptions,\n            ...elementPropArr[index].dataOptions,\n          }}\n          key={`${path}_${elementPropArr[index].name}`}\n          TypeSpecificParameters={TypeSpecificParameters}\n          onChange={(newCardObj: { [string]: any }) => {\n            const newElementObjArr = generateElementPropsFromSchemas({\n              schema,\n              uischema,\n              definitionData,\n              definitionUi,\n              categoryHash,\n            });\n\n            // extract uiOptions and other properties\n            const newDataProps = {};\n            const newUiProps = {};\n            Object.keys(newCardObj).forEach((propName) => {\n              if (propName.startsWith('ui:')) {\n                if (propName.startsWith('ui:*')) {\n                  newUiProps[propName.substring(4)] = newCardObj[propName];\n                } else {\n                  newUiProps[propName] = newCardObj[propName];\n                }\n              } else if (\n                ![\n                  'name',\n                  'required',\n                  'neighborNames',\n                  'dependents',\n                  'dependent',\n                  'parent',\n                ].includes(propName)\n              ) {\n                newDataProps[propName] = newCardObj[propName];\n              }\n            });\n\n            if (newElementObjArr[index].propType === 'card') {\n              const oldElement = newElementObjArr[index];\n              newElementObjArr[index] = {\n                ...oldElement,\n                dataOptions: newDataProps,\n                uiOptions: newUiProps,\n                required: newCardObj.required,\n                dependents: newCardObj.dependents,\n                dependent: newCardObj.dependent,\n                parent: newCardObj.parent,\n                name: newCardObj.name,\n                $ref: newCardObj.$ref,\n                propType: 'card',\n              };\n            } else {\n              throw new Error('Card editing non card element');\n            }\n            updateSchemas(newElementObjArr, {\n              schema,\n              uischema,\n              definitionData,\n              definitionUi,\n              onChange,\n            });\n          }}\n          onDelete={() => {\n            // splice out this index from the card array\n            const newElementObjArr = generateElementPropsFromSchemas({\n              schema,\n              uischema,\n              definitionData,\n              definitionUi,\n              categoryHash,\n            });\n            newElementObjArr.splice(index, 1);\n            setCardOpenArray([\n              ...cardOpenArray.slice(0, index),\n              ...cardOpenArray.slice(index + 1),\n            ]);\n            updateSchemas(newElementObjArr, {\n              schema,\n              uischema,\n              definitionData,\n              definitionUi,\n              onChange,\n            });\n          }}\n          onMoveUp={() => {\n            const newElementObjArr = generateElementPropsFromSchemas({\n              schema,\n              uischema,\n              definitionData,\n              definitionUi,\n              categoryHash,\n            });\n            if (index === 0) return;\n\n            const tempBlock = newElementObjArr[index - 1];\n            newElementObjArr[index - 1] = newElementObjArr[index];\n            newElementObjArr[index] = tempBlock;\n            updateSchemas(newElementObjArr, {\n              schema,\n              uischema,\n              definitionData,\n              definitionUi,\n              onChange,\n            });\n          }}\n          onMoveDown={() => {\n            const newElementObjArr = generateElementPropsFromSchemas({\n              schema,\n              uischema,\n              definitionData,\n              definitionUi,\n              categoryHash,\n            });\n            if (index === elementPropArr.length - 1) return;\n\n            const tempBlock = newElementObjArr[index + 1];\n            newElementObjArr[index + 1] = newElementObjArr[index];\n            newElementObjArr[index] = tempBlock;\n            updateSchemas(newElementObjArr, {\n              schema,\n              uischema,\n              definitionData,\n              definitionUi,\n              onChange,\n            });\n          }}\n          addElem={(choice: string) => {\n            if (choice === 'card') {\n              addCardObj({\n                schema,\n                uischema,\n                mods,\n                onChange,\n                definitionData: definitionData || {},\n                definitionUi: definitionUi || {},\n                index,\n                categoryHash,\n              });\n            } else if (choice === 'section') {\n              addSectionObj({\n                schema,\n                uischema,\n                onChange,\n                definitionData: definitionData || {},\n                definitionUi: definitionUi || {},\n                index,\n                categoryHash,\n              });\n            }\n            setCardOpenArray([...cardOpenArray, false]);\n          }}\n          cardOpen={expanded}\n          setCardOpen={(newState: boolean) =>\n            setCardOpenArray([\n              ...cardOpenArray.slice(0, index),\n              newState,\n              ...cardOpenArray.slice(index + 1),\n            ])\n          }\n          allFormInputs={allFormInputs}\n          mods={mods}\n        />\n      );\n    } else if (elementProp.propType === 'section') {\n      // create a section with the appropriate schemas here\n      return (\n        <Section\n          schema={elementProp.schema}\n          uischema={elementProp.uischema}\n          onChange={(\n            newSchema: { [string]: any },\n            newUiSchema: { [string]: any },\n            newRef?: string,\n          ) => {\n            const newElementObjArr = generateElementPropsFromSchemas({\n              schema,\n              uischema,\n              definitionData,\n              definitionUi,\n              categoryHash,\n            });\n\n            const oldSection = newElementObjArr[index];\n\n            newElementObjArr[index] = {\n              ...oldSection,\n              schema: newSchema,\n              uischema: newUiSchema,\n              propType: 'section',\n            };\n\n            if (newRef) newElementObjArr[index].$ref = newRef;\n\n            updateSchemas(newElementObjArr, {\n              schema,\n              uischema,\n              definitionData,\n              definitionUi,\n              onChange,\n            });\n          }}\n          onNameChange={(newName: string) => {\n            const oldSection = elementProp;\n\n            // check if newName overlaps with an existing name\n            if (elementPropArr.map((elem) => elem.name).includes(newName))\n              return;\n\n            const newElementObjArr = generateElementPropsFromSchemas({\n              schema,\n              uischema,\n              definitionData,\n              definitionUi,\n              categoryHash,\n            });\n            newElementObjArr[index] = {\n              ...oldSection,\n              name: newName,\n            };\n            updateSchemas(newElementObjArr, {\n              schema,\n              uischema,\n              definitionData,\n              definitionUi,\n              onChange,\n            });\n          }}\n          onRequireToggle={() => {\n            const oldSection = elementProp;\n\n            const newElementObjArr = generateElementPropsFromSchemas({\n              schema,\n              uischema,\n              definitionData,\n              definitionUi,\n              categoryHash,\n            });\n            newElementObjArr[index] = {\n              ...oldSection,\n              required: !oldSection.required,\n            };\n            updateSchemas(newElementObjArr, {\n              schema,\n              uischema,\n              definitionData,\n              definitionUi,\n              onChange,\n            });\n          }}\n          onDependentsChange={(\n            newDependents: Array<{\n              children: Array<string>,\n              value?: any,\n            }>,\n          ) => {\n            const oldSection = elementProp;\n\n            const newElementObjArr = generateElementPropsFromSchemas({\n              schema,\n              uischema,\n              definitionData,\n              definitionUi,\n              categoryHash,\n            });\n            newElementObjArr[index] = {\n              ...oldSection,\n              dependents: newDependents,\n            };\n            updateSchemas(newElementObjArr, {\n              schema,\n              uischema,\n              onChange,\n              definitionData,\n              definitionUi,\n            });\n          }}\n          onDelete={() => {\n            // splice out this index from the card array\n            const newElementObjArr = generateElementPropsFromSchemas({\n              schema,\n              uischema,\n              definitionData,\n              definitionUi,\n              categoryHash,\n            });\n            newElementObjArr.splice(index, 1);\n            setCardOpenArray([\n              ...cardOpenArray.slice(0, index),\n              ...cardOpenArray.slice(index + 1),\n            ]);\n            updateSchemas(newElementObjArr, {\n              schema,\n              uischema,\n              definitionData,\n              definitionUi,\n              onChange,\n            });\n          }}\n          onMoveUp={() => {\n            const newElementObjArr = generateElementPropsFromSchemas({\n              schema,\n              uischema,\n              definitionData,\n              definitionUi,\n              categoryHash,\n            });\n            if (index === 0) return;\n\n            const tempBlock = newElementObjArr[index - 1];\n            newElementObjArr[index - 1] = newElementObjArr[index];\n            newElementObjArr[index] = tempBlock;\n            updateSchemas(newElementObjArr, {\n              schema,\n              uischema,\n              definitionData,\n              definitionUi,\n              onChange,\n            });\n          }}\n          onMoveDown={() => {\n            const newElementObjArr = generateElementPropsFromSchemas({\n              schema,\n              uischema,\n              definitionData,\n              definitionUi,\n              categoryHash,\n            });\n            if (index === elementPropArr.length - 1) return;\n\n            const tempBlock = newElementObjArr[index + 1];\n            newElementObjArr[index + 1] = newElementObjArr[index];\n            newElementObjArr[index] = tempBlock;\n            updateSchemas(newElementObjArr, {\n              schema,\n              uischema,\n              definitionData,\n              definitionUi,\n              onChange,\n            });\n          }}\n          name={elementProp.name}\n          key={`${path}_${elementPropArr[index].name}`}\n          required={elementProp.required}\n          path={`${path}_${elementProp.name}`}\n          definitionData={definitionData || {}}\n          definitionUi={definitionUi || {}}\n          hideKey={hideKey}\n          reference={elementProp.$ref}\n          neighborNames={elementProp.neighborNames}\n          dependents={elementProp.dependents}\n          dependent={elementProp.dependent}\n          parent={elementProp.parent}\n          addElem={(choice: string) => {\n            if (choice === 'card') {\n              addCardObj({\n                schema,\n                uischema,\n                mods,\n                onChange,\n                definitionData: definitionData || {},\n                definitionUi: definitionUi || {},\n                index,\n                categoryHash,\n              });\n            } else if (choice === 'section') {\n              addSectionObj({\n                schema,\n                uischema,\n                onChange,\n                definitionData: definitionData || {},\n                definitionUi: definitionUi || {},\n                index,\n                categoryHash,\n              });\n            }\n            setCardOpenArray([...cardOpenArray, false]);\n          }}\n          cardOpen={expanded}\n          setCardOpen={(newState: boolean) =>\n            setCardOpenArray([\n              ...cardOpenArray.slice(0, index),\n              newState,\n              ...cardOpenArray.slice(index + 1),\n            ])\n          }\n          allFormInputs={allFormInputs}\n          categoryHash={categoryHash}\n          mods={mods}\n        />\n      );\n    } else {\n      return (\n        <div>\n          <h2> Error parsing element </h2>\n        </div>\n      );\n    }\n  });\n\n  return elementList;\n}\n\n// function called when drag and drop ends\nexport function onDragEnd(\n  result: any,\n  details: {\n    schema: { [string]: any },\n    uischema: { [string]: any },\n    onChange: ({ [string]: any }, { [string]: any }) => any,\n    definitionData?: { [string]: any },\n    definitionUi?: { [string]: any },\n    categoryHash: { [string]: string },\n  },\n) {\n  const {\n    schema,\n    uischema,\n    onChange,\n    definitionData,\n    definitionUi,\n    categoryHash,\n  } = details;\n  const src = result.source.index;\n  const dest = result.destination.index;\n  const newElementObjArr = generateElementPropsFromSchemas({\n    schema,\n    uischema,\n    definitionData,\n    definitionUi,\n    categoryHash,\n  });\n\n  const tempBlock = newElementObjArr[src];\n  newElementObjArr[src] = newElementObjArr[dest];\n  newElementObjArr[dest] = tempBlock;\n\n  updateSchemas(newElementObjArr, {\n    schema,\n    uischema,\n    definitionData: definitionData || {},\n    definitionUi: definitionUi || {},\n    onChange,\n  });\n}\n\n// helper function to recursively update sections\nfunction propagateElementChange(\n  elementArr: Array<ElementProps>,\n  definitionData: { [string]: any },\n  definitionUi: { [string]: any },\n  categoryHash: { [string]: string },\n) {\n  const updatedElementArr = [];\n  elementArr.forEach((element) => {\n    // update section and it's children\n    if (element.propType === 'section') {\n      const childrenElements = generateElementPropsFromSchemas({\n        schema: element.schema,\n        uischema: element.uischema,\n        definitionData,\n        definitionUi,\n        categoryHash,\n      });\n      const updatedChildren = propagateElementChange(\n        childrenElements,\n        definitionData,\n        definitionUi,\n        categoryHash,\n      );\n      const newUiSchema = {\n        ...element.uischema,\n        ...generateUiSchemaFromElementProps(updatedChildren, definitionUi),\n      };\n      const newSchema = {\n        ...element.schema,\n        ...generateSchemaFromElementProps(updatedChildren),\n      };\n      const newElement = {\n        ...element,\n        schema: newSchema,\n        uischema: newUiSchema,\n      };\n      updatedElementArr.push(newElement);\n    } else {\n      updatedElementArr.push(element);\n    }\n  });\n  return updatedElementArr;\n}\n\n// propogate changes in a schema and ui schema with updated definitions but outdated body componenents\nexport function propagateDefinitionChanges(\n  schema: { [string]: any },\n  uischema: { [string]: any },\n  onChange: ({ [string]: any }, { [string]: any }) => void,\n  categoryHash: { [string]: string },\n) {\n  const definitionData = schema.definitions;\n  const definitionUi = uischema.definitions;\n  const bodyElements = generateElementPropsFromSchemas({\n    schema,\n    uischema,\n    definitionData,\n    definitionUi,\n    categoryHash,\n  });\n  const updatedBodyElements = propagateElementChange(\n    bodyElements,\n    definitionData,\n    definitionUi,\n    categoryHash,\n  );\n\n  updateSchemas(updatedBodyElements, {\n    schema,\n    uischema,\n    definitionData,\n    definitionUi,\n    onChange,\n  });\n}\n\n// Member-wise subtraction of array2 from array1\nexport function subtractArray(\n  array1: Array<string>,\n  array2?: Array<string>,\n): Array<string> {\n  if (array2 === undefined || array2 === null) return array1;\n\n  const keys = array2.reduce((acc, curr) => {\n    acc[curr] = true;\n    return acc;\n  }, {});\n\n  return array1.filter((v) => !keys[v]);\n}\n\nexport function excludeKeys(\n  obj: { [string]: any },\n  keys: ?(string[]),\n): { [string]: any } {\n  if (!keys) return { ...obj };\n\n  const keysHash = keys.reduce((acc, curr) => {\n    acc[curr] = true;\n    return acc;\n  }, {});\n\n  return Object.keys(obj).reduce(\n    (acc, curr) => (keysHash[curr] ? acc : { ...acc, [curr]: obj[curr] }),\n    {},\n  );\n}\n\nexport function getNewElementDefaultDataOptions(i: number, mods?: Mods) {\n  if (mods && mods.newElementDefaultDataOptions !== undefined) {\n    const title = `${mods.newElementDefaultDataOptions.title} ${i}`;\n    return { ...mods.newElementDefaultDataOptions, ...{ title: title } };\n  } else {\n    return {\n      title: `New Input ${i}`,\n      type: 'string',\n      default: '',\n    };\n  }\n}\n\nexport function getRandomId() {\n  const chars = [\n    'a',\n    'b',\n    'c',\n    'd',\n    'e',\n    'f',\n    'g',\n    'h',\n    'i',\n    'j',\n    'k',\n    'l',\n    'm',\n    'n',\n    'o',\n    'p',\n    'q',\n    'r',\n    's',\n    't',\n    'u',\n    'v',\n    'w',\n    'x',\n    'y',\n    'z',\n  ];\n  const numberOfChars = chars.length;\n  const randomIdLength = 50;\n\n  return Array.from({ length: randomIdLength })\n    .map(() => chars[Math.floor(Math.random() * numberOfChars)])\n    .join('');\n}\n","// @flow\n\nimport React, { useState } from 'react';\nimport { getRandomId } from '../utils';\nimport Tooltip from '../Tooltip';\n\n// warning message if not all possibilities specified\nexport default function DependencyWarning({\n  parameters,\n}: {\n  parameters: {\n    [string]: any,\n    name?: string,\n    dependents?: Array<{\n      children: Array<string>,\n      value?: any,\n    }>,\n    type?: string,\n    enum?: Array<string | number>,\n    neighborNames?: Array<string>,\n    schema?: string,\n  },\n}) {\n  const [elementId] = useState(getRandomId());\n  if (\n    parameters.enum &&\n    parameters.dependents &&\n    parameters.dependents.length &&\n    parameters.dependents[0].value\n  ) {\n    // get the set of defined enum values\n    const definedVals = new Set([]);\n    parameters.dependents.forEach((possibility) => {\n      if (possibility.value && possibility.value.enum)\n        possibility.value.enum.forEach((val) => definedVals.add(val));\n    });\n    const undefinedVals = [];\n    if (Array.isArray(parameters.enum))\n      parameters.enum.forEach((val) => {\n        if (!definedVals.has(val)) undefinedVals.push(val);\n      });\n    if (undefinedVals.length === 0) return null;\n    return (\n      <React.Fragment>\n        <p>\n          Warning! The following values do not have associated dependency\n          values:{' '}\n          <Tooltip\n            id={`${elementId}_valuewarning`}\n            type='help'\n            text='Each possible value for a value-based dependency must be defined to work properly'\n          />\n        </p>\n\n        <ul>\n          {undefinedVals.map((val, index) => (\n            <li key={index}>{val}</li>\n          ))}\n        </ul>\n      </React.Fragment>\n    );\n  }\n\n  return null;\n}\n","// @flow\n\nimport React, { useState } from 'react';\nimport Select from 'react-select';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\nimport FontAwesomeIcon from '../FontAwesomeIcon';\nimport { getRandomId } from '../utils';\n\n// a field that lets you choose adjacent blocks\nexport default function CardSelector({\n  possibleChoices,\n  chosenChoices,\n  onChange,\n  placeholder,\n  path,\n}: {\n  possibleChoices: Array<string>,\n  chosenChoices: Array<string>,\n  onChange: (chosenChoices: Array<string>) => void,\n  placeholder: string,\n  path: string,\n}) {\n  const [elementId] = useState(getRandomId());\n  return (\n    <React.Fragment>\n      <ul>\n        {chosenChoices.map((chosenChoice, index) => (\n          <li key={`${elementId}_neighbor_${index}`}>\n            {chosenChoice}{' '}\n            <FontAwesomeIcon\n              icon={faTimes}\n              onClick={() =>\n                onChange([\n                  ...chosenChoices.slice(0, index),\n                  ...chosenChoices.slice(index + 1),\n                ])\n              }\n            />\n          </li>\n        ))}\n      </ul>\n      <Select\n        value={{\n          value: '',\n          label: '',\n        }}\n        placeholder={placeholder}\n        options={possibleChoices\n          .filter((choice) => !chosenChoices.includes(choice))\n          .map((choice) => ({\n            value: choice,\n            label: choice,\n          }))}\n        onChange={(val: any) => {\n          onChange([...chosenChoices, val.value]);\n        }}\n        className='card-modal-select'\n      />\n    </React.Fragment>\n  );\n}\n","// @flow\n\nimport * as React from 'react';\nimport { Input } from 'reactstrap';\nimport { createUseStyles } from 'react-jss';\nimport { faPlus, faTimes } from '@fortawesome/free-solid-svg-icons';\nimport FontAwesomeIcon from './FontAwesomeIcon';\n\nconst useStyles = createUseStyles({\n  cardEnumOption: {\n    width: '100%',\n    display: 'flex',\n    flexDirection: 'row',\n    marginBottom: '.5em',\n    '& input': { width: '80%', marginRight: '1em', marginBottom: 0 },\n    '& .delete-button': {\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'center',\n    },\n  },\n});\n\n// Input field corresponding to an array of values, add and remove\nexport default function CardEnumOptions({\n  initialValues,\n  names,\n  showNames,\n  onChange,\n  type,\n}: {\n  initialValues: Array<any>,\n  names?: Array<string>,\n  showNames: boolean,\n  onChange: (newEnums: Array<any>, newEnumNames?: Array<string>) => void,\n  type: string,\n}) {\n  const classes = useStyles();\n\n  const possibleValues = [];\n  for (let index = 0; index < initialValues.length; index += 1) {\n    const value = initialValues[index];\n    let name = `${value}`;\n    if (names && index < names.length) name = names[index];\n    possibleValues.push(\n      <div key={index} className={classes.cardEnumOption}>\n        <Input\n          value={value === undefined || value === null ? '' : value}\n          placeholder='Possible Value'\n          key={`val-${index}`}\n          type={type === 'string' ? 'text' : 'number'}\n          onChange={(ev: any) => {\n            let newVal;\n            switch (type) {\n              case 'string':\n                newVal = ev.target.value;\n                break;\n              case 'number':\n              case 'integer':\n                newVal = parseFloat(ev.target.value);\n                if (Number.isInteger(newVal))\n                  newVal = parseInt(ev.target.value, 10);\n                if (Number.isNaN(newVal)) newVal = type === 'string' ? '' : 0;\n                break;\n              default:\n                throw new Error(`Enum called with unknown type ${type}`);\n            }\n            onChange(\n              [\n                ...initialValues.slice(0, index),\n                newVal,\n                ...initialValues.slice(index + 1),\n              ],\n              names,\n            );\n          }}\n          className='card-text'\n        />\n        <Input\n          value={name || ''}\n          placeholder='Label'\n          key={`name-${index}`}\n          type='text'\n          onChange={(ev: any) => {\n            if (names)\n              onChange(initialValues, [\n                ...names.slice(0, index),\n                ev.target.value,\n                ...names.slice(index + 1),\n              ]);\n          }}\n          className='card-text'\n          style={{ display: showNames ? 'initial' : 'none' }}\n        />\n        <div className='delete-button'>\n          <FontAwesomeIcon\n            icon={faTimes}\n            onClick={() => {\n              // remove this value\n              onChange(\n                [\n                  ...initialValues.slice(0, index),\n                  ...initialValues.slice(index + 1),\n                ],\n                names\n                  ? [...names.slice(0, index), ...names.slice(index + 1)]\n                  : undefined,\n              );\n            }}\n          />\n        </div>\n      </div>,\n    );\n  }\n\n  return (\n    <React.Fragment>\n      {possibleValues}\n      <FontAwesomeIcon\n        icon={faPlus}\n        onClick={() => {\n          // add a new dropdown option\n          onChange(\n            [...initialValues, type === 'string' ? '' : 0],\n            names ? [...names, ''] : undefined,\n          );\n        }}\n      />\n    </React.Fragment>\n  );\n}\n","// @flow\n\nimport React, { useState } from 'react';\nimport { Input } from 'reactstrap';\nimport { faTimes, faPlus } from '@fortawesome/free-solid-svg-icons';\nimport CardEnumOptions from '../CardEnumOptions';\nimport CardSelector from './CardSelector';\nimport FBCheckbox from '../checkbox/FBCheckbox';\nimport FontAwesomeIcon from '../FontAwesomeIcon';\nimport { getRandomId } from '../utils';\n\n// handle value options for different card types\nexport default function ValueSelector({\n  possibility,\n  onChange,\n  parentEnums,\n  parentType,\n  parentName,\n  parentSchema,\n  path,\n}: {\n  possibility: {\n    children: Array<string>,\n    value: any,\n  },\n  onChange: (newPossibility: {\n    children: Array<string>,\n    value?: any,\n  }) => void,\n  parentEnums?: Array<string | number>,\n  parentType?: string,\n  parentName?: string,\n  parentSchema?: any,\n  path: string,\n}) {\n  const [elementId] = useState(getRandomId());\n  if (possibility.value) {\n    // enum type\n    if (parentEnums) {\n      const enumType = typeof parentEnums[0] === 'number' ? 'number' : 'string';\n      if (enumType === 'string')\n        return (\n          <CardSelector\n            possibleChoices={parentEnums.map((val) => `${val}`)}\n            chosenChoices={possibility.value.enum}\n            onChange={(chosenChoices: Array<string>) =>\n              onChange({ ...possibility, value: { enum: chosenChoices } })\n            }\n            placeholder='Allowed value'\n            path={path}\n          />\n        );\n      if (enumType === 'number')\n        return (\n          <CardSelector\n            possibleChoices={parentEnums.map((val) => `${val}`)}\n            chosenChoices={possibility.value.enum}\n            onChange={(chosenChoices: Array<string>) =>\n              onChange({\n                ...possibility,\n                value: {\n                  enum: chosenChoices.map((val) => Number.parseFloat(val)),\n                },\n              })\n            }\n            placeholder='Allowed value'\n            path={path}\n          />\n        );\n    }\n    // check box type\n    if (parentType === 'boolean') {\n      return (\n        <FBCheckbox\n          onChangeValue={() => {\n            if (possibility.value.enum && possibility.value.enum[0]) {\n              onChange({\n                ...possibility,\n                value: { enum: [false] },\n              });\n            } else {\n              onChange({\n                ...possibility,\n                value: { enum: [true] },\n              });\n            }\n          }}\n          isChecked={possibility.value.enum && possibility.value.enum[0]}\n          label={parentName}\n        />\n      );\n    }\n    // object type\n    if (parentType === 'object') {\n      const enumArr = (possibility.value.enum: Array<any>);\n\n      return (\n        <div>\n          {enumArr.map((combination, index) => (\n            <li key={`${elementId}_possibleValue${index}`}>\n              {Object.keys(combination).map((key) => {\n                const val = combination[key];\n                return (\n                  <div key={key}>\n                    <h5>{key}:</h5>\n                    {\n                      {\n                        string: (\n                          <Input\n                            value={val || ''}\n                            placeholder='String value'\n                            type='string'\n                            onChange={(ev: any) => {\n                              const newVal = ev.target.value;\n                              const oldCombo = possibility.value.enum[index];\n                              onChange({\n                                ...possibility,\n                                value: {\n                                  enum: [\n                                    ...enumArr.slice(0, index),\n                                    { ...oldCombo, [key]: newVal },\n                                    ...enumArr.slice(index + 1),\n                                  ],\n                                },\n                              });\n                            }}\n                            className='card-modal-text'\n                          />\n                        ),\n                        number: (\n                          <Input\n                            value={val || ''}\n                            placeholder='Number value'\n                            type='number'\n                            onChange={(ev: any) => {\n                              const newVal = Number.parseFloat(ev.target.value);\n                              const oldCombo = possibility.value.enum[index];\n                              onChange({\n                                ...possibility,\n                                value: {\n                                  enum: [\n                                    ...enumArr.slice(0, index),\n                                    { ...oldCombo, [key]: newVal },\n                                    ...enumArr.slice(index + 1),\n                                  ],\n                                },\n                              });\n                            }}\n                            className='card-modal-number'\n                          />\n                        ),\n                        array: (\n                          <Input\n                            value={JSON.stringify(val) || ''}\n                            placeholder='Array in JSON'\n                            type='string'\n                            onChange={(ev: any) => {\n                              let newVal = val;\n                              try {\n                                newVal = JSON.parse(ev.target.value);\n                              } catch (error) {\n                                // eslint-disable-next-line no-console\n                                console.error('invalid JSON array input');\n                              }\n                              const oldCombo = possibility.value.enum[index];\n                              onChange({\n                                ...possibility,\n                                value: {\n                                  enum: [\n                                    ...enumArr.slice(0, index),\n                                    { ...oldCombo, [key]: newVal },\n                                    ...enumArr.slice(index + 1),\n                                  ],\n                                },\n                              });\n                            }}\n                            className='card-modal-text'\n                          />\n                        ),\n                        object: (\n                          <Input\n                            value={JSON.stringify(val) || ''}\n                            placeholder='Object in JSON'\n                            type='string'\n                            onChange={(ev: any) => {\n                              let newVal = val;\n                              try {\n                                newVal = JSON.parse(ev.target.value);\n                              } catch (error) {\n                                // eslint-disable-next-line no-console\n                                console.error('invalid JSON object input');\n                              }\n                              const oldCombo = possibility.value.enum[index];\n                              onChange({\n                                ...possibility,\n                                value: {\n                                  enum: [\n                                    ...enumArr.slice(0, index),\n                                    { ...oldCombo, [key]: newVal },\n                                    ...enumArr.slice(index + 1),\n                                  ],\n                                },\n                              });\n                            }}\n                            className='card-modal-text'\n                          />\n                        ),\n                      }[typeof val]\n                    }\n                  </div>\n                );\n              })}\n              <FontAwesomeIcon\n                icon={faTimes}\n                onClick={() =>\n                  onChange({\n                    ...possibility,\n                    value: {\n                      enum: [\n                        ...enumArr.slice(0, index),\n                        ...enumArr.slice(index + 1),\n                      ],\n                    },\n                  })\n                }\n              />\n            </li>\n          ))}\n          <FontAwesomeIcon\n            icon={faPlus}\n            onClick={() => {\n              const newCase = {};\n              const propArr = parentSchema ? parentSchema.properties : {};\n              Object.keys(propArr).forEach((key) => {\n                if (\n                  propArr[key].type === 'number' ||\n                  propArr[key].type === 'integer'\n                ) {\n                  newCase[key] = 0;\n                } else if (propArr[key].type === 'array' || propArr[key].enum) {\n                  newCase[key] = [];\n                } else if (\n                  propArr[key].type === 'object' ||\n                  propArr[key].properties\n                ) {\n                  newCase[key] = {};\n                } else {\n                  newCase[key] = '';\n                }\n              });\n              onChange({\n                ...possibility,\n                value: { enum: [...enumArr, newCase] },\n              });\n            }}\n          />\n        </div>\n      );\n    }\n    return (\n      <CardEnumOptions\n        initialValues={possibility.value.enum}\n        onChange={(newEnum: Array<any>) =>\n          onChange({ ...possibility, value: { enum: newEnum } })\n        }\n        type={parentType || 'string'}\n        showNames={false}\n      />\n    );\n  } else {\n    return <h5> Appear if defined </h5>;\n  }\n}\n","// @flow\n\nimport React, { useState } from 'react';\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\nimport Tooltip from '../Tooltip';\nimport CardSelector from './CardSelector';\nimport ValueSelector from './ValueSelector';\nimport FontAwesomeIcon from '../FontAwesomeIcon';\nimport { getRandomId } from '../utils';\n\n// a possible dependency\nexport default function DependencyPossibility({\n  possibility,\n  neighborNames,\n  path,\n  onChange,\n  onDelete,\n  parentEnums,\n  parentType,\n  parentName,\n  parentSchema,\n}: {\n  possibility: {\n    children: Array<string>,\n    value?: any,\n  },\n  neighborNames: Array<string>,\n  path: string,\n  onChange: (newPossibility: {\n    children: Array<string>,\n    value?: any,\n  }) => void,\n  onDelete: () => void,\n  parentEnums?: Array<string | number>,\n  parentType?: string,\n  parentName?: string,\n  parentSchema?: any,\n}) {\n  const [elementId] = useState(getRandomId());\n  return (\n    <div className='form-dependency-condition'>\n      <h5>\n        Display the following:{' '}\n        <Tooltip\n          id={`${elementId}_bulk`}\n          type='help'\n          text='Choose the other form elements that depend on this one'\n        />\n      </h5>\n      <CardSelector\n        possibleChoices={\n          neighborNames.filter((name) => name !== parentName) || []\n        }\n        chosenChoices={possibility.children}\n        onChange={(chosenChoices: Array<string>) =>\n          onChange({ ...possibility, children: [...chosenChoices] })\n        }\n        placeholder='Choose a dependent...'\n        path={path}\n      />\n      <h5>\n        If \"{parentName}\" has {possibility.value ? 'the value:' : 'a value.'}\n      </h5>\n      <div style={{ display: possibility.value ? 'block' : 'none' }}>\n        <ValueSelector\n          possibility={possibility}\n          onChange={(newPossibility: {\n            children: Array<string>,\n            value?: any,\n          }) => onChange(newPossibility)}\n          parentEnums={parentEnums}\n          parentType={parentType}\n          parentName={parentName}\n          parentSchema={parentSchema}\n          path={path}\n        />\n      </div>\n      <FontAwesomeIcon icon={faTimes} onClick={() => onDelete()} />\n    </div>\n  );\n}\n","// @flow\n\nimport React, { useState } from 'react';\nimport { UncontrolledTooltip } from 'reactstrap';\nimport { createUseStyles } from 'react-jss';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport FBRadioGroup from '../radio/FBRadioGroup';\nimport Tooltip from '../Tooltip';\nimport DependencyWarning from './DependencyWarning';\nimport DependencyPossibility from './DependencyPossibility';\nimport FontAwesomeIcon from '../FontAwesomeIcon';\nimport { getRandomId } from '../utils';\n\nconst useStyles = createUseStyles({\n  dependencyField: {\n    '& .fa': { cursor: 'pointer' },\n    '& .plus': { marginLeft: '1em' },\n    '& h4': { marginBottom: '.5em' },\n    '& h5': { fontSize: '1em' },\n    '& .form-dependency-select': { fontSize: '0.75em', marginBottom: '1em' },\n    '& .form-dependency-conditions': {\n      textAlign: 'left',\n      '& .form-dependency-condition': {\n        padding: '1em',\n        border: '1px solid gray',\n        borderRadius: '4px',\n        margin: '1em',\n        '& *': { textAlign: 'initial' },\n      },\n    },\n    '& p': { fontSize: '0.75em' },\n    '& .fb-radio-button': {\n      display: 'block',\n    },\n  },\n});\n\n// checks whether an array corresponds to oneOf dependencies\nfunction checkIfValueBasedDependency(\n  dependents: Array<{\n    children: Array<string>,\n    value?: any,\n  }>,\n) {\n  let valueBased = true;\n  if (dependents && Array.isArray(dependents) && dependents.length > 0) {\n    dependents.forEach((possibility) => {\n      if (!possibility.value || !possibility.value.enum) {\n        valueBased = false;\n      }\n    });\n  } else {\n    valueBased = false;\n  }\n\n  return valueBased;\n}\n\ntype DependencyParams = {\n  [string]: any,\n  name?: string,\n  dependents?: Array<{\n    children: Array<string>,\n    value?: any,\n  }>,\n  type?: string,\n  enum?: Array<string | number>,\n  neighborNames?: Array<string>,\n  schema?: any,\n};\n\nexport default function DependencyField({\n  parameters,\n  onChange,\n}: {\n  parameters: DependencyParams,\n  onChange: (newParams: DependencyParams) => void,\n}) {\n  const [elementId] = useState(getRandomId());\n  const classes = useStyles();\n  const valueBased = checkIfValueBasedDependency(parameters.dependents || []);\n  return (\n    <div className={`form-dependency ${classes.dependencyField}`}>\n      <h4>\n        Dependencies{' '}\n        <Tooltip\n          id={`${elementId}_dependent`}\n          type='help'\n          text='Control whether other form elements show based on this one'\n        />\n      </h4>\n      {!!parameters.dependents && parameters.dependents.length > 0 && (\n        <React.Fragment>\n          <FBRadioGroup\n            defaultValue={valueBased ? 'value' : 'definition'}\n            horizontal={false}\n            options={[\n              {\n                value: 'definition',\n                label: 'Any value dependency',\n              },\n              {\n                value: 'value',\n                label: (\n                  <React.Fragment>\n                    Specific value dependency{' '}\n                    <Tooltip\n                      id={`${elementId}_valuebased`}\n                      type='help'\n                      text=\"Specify whether these elements should show based on this element's value\"\n                    />\n                  </React.Fragment>\n                ),\n              },\n            ]}\n            onChange={(selection) => {\n              if (parameters.dependents) {\n                const newDependents = [...parameters.dependents];\n                if (selection === 'definition') {\n                  parameters.dependents.forEach((possibility, index) => {\n                    newDependents[index] = {\n                      ...possibility,\n                      value: undefined,\n                    };\n                  });\n                } else {\n                  parameters.dependents.forEach((possibility, index) => {\n                    newDependents[index] = {\n                      ...possibility,\n                      value: { enum: [] },\n                    };\n                  });\n                }\n                onChange({\n                  ...parameters,\n                  dependents: newDependents,\n                });\n              }\n            }}\n          />\n        </React.Fragment>\n      )}\n      <DependencyWarning parameters={parameters} />\n      <div className='form-dependency-conditions'>\n        {parameters.dependents\n          ? parameters.dependents.map((possibility, index) => (\n              <DependencyPossibility\n                possibility={possibility}\n                neighborNames={parameters.neighborNames || []}\n                parentEnums={parameters.enum}\n                parentType={parameters.type}\n                parentName={parameters.name}\n                parentSchema={parameters.schema}\n                path={parameters.path}\n                key={`${elementId}_possibility${index}`}\n                onChange={(newPossibility: {\n                  children: Array<string>,\n                  value?: any,\n                }) => {\n                  const newDependents = parameters.dependents\n                    ? [...parameters.dependents]\n                    : [];\n                  newDependents[index] = newPossibility;\n                  onChange({\n                    ...parameters,\n                    dependents: newDependents,\n                  });\n                }}\n                onDelete={() => {\n                  const newDependents = parameters.dependents\n                    ? [...parameters.dependents]\n                    : [];\n                  onChange({\n                    ...parameters,\n                    dependents: [\n                      ...newDependents.slice(0, index),\n                      ...newDependents.slice(index + 1),\n                    ],\n                  });\n                }}\n              />\n            ))\n          : ''}\n\n        <span className='plus' id={`${elementId}_adddependency`}>\n          <FontAwesomeIcon\n            icon={faPlus}\n            onClick={() => {\n              const newDependents = parameters.dependents\n                ? [...parameters.dependents]\n                : [];\n              newDependents.push({\n                children: [],\n                value: valueBased ? { enum: [] } : undefined,\n              });\n              onChange({\n                ...parameters,\n                dependents: newDependents,\n              });\n            }}\n          />\n        </span>\n        <UncontrolledTooltip\n          placement='top'\n          target={`${elementId}_adddependency`}\n        >\n          Add another dependency relation linking this element and other form\n          elements\n        </UncontrolledTooltip>\n      </div>\n    </div>\n  );\n}\n","// @flow\n\nimport * as React from 'react';\nimport { Modal, ModalHeader, Button, ModalBody, ModalFooter } from 'reactstrap';\nimport { createUseStyles } from 'react-jss';\nimport DependencyField from './dependencies/DependencyField';\nimport type { Parameters } from './types';\n\nconst useStyles = createUseStyles({\n  cardModal: {\n    '& .card-modal-header': { paddingTop: '.5em', paddingBottom: '.5em' },\n    '& .card-modal-entries': { padding: '1em' },\n    '& h4, h5, p, label, li': { marginTop: '.5em', marginBottom: '.5em' },\n    '& h5, p, label, li': { fontSize: '14px' },\n    '& h4': { fontSize: '16px' },\n    '& h3': { fontSize: '18px', marginBottom: 0 },\n    '& .card-modal-entries > div > input': {\n      marginBottom: '1em',\n      height: '32px',\n    },\n    '& .fa-question-circle': { color: 'var(--gray)' },\n    '& .card-modal-boolean': {\n      '& *': { marginRight: '0.25em', height: 'auto', display: 'inline-block' },\n    },\n    '& .card-modal-select': {\n      '& input': { margin: '0', height: '20px' },\n      marginBottom: '1em',\n    },\n  },\n});\n\nexport default function CardModal({\n  componentProps,\n  onChange,\n  isOpen,\n  onClose,\n  TypeSpecificParameters,\n}: {\n  componentProps: {\n    [string]: any,\n  },\n  onChange: (any) => void,\n  isOpen: boolean,\n  onClose: () => void,\n  TypeSpecificParameters: React.AbstractComponent<{\n    parameters: Parameters,\n    onChange: (newParams: Parameters) => void,\n  }>,\n}) {\n  const classes = useStyles();\n  // assign state values for parameters that should only change on hitting \"Save\"\n  const [componentPropsState, setComponentProps] =\n    React.useState(componentProps);\n\n  React.useEffect(() => {\n    setComponentProps(componentProps);\n  }, [componentProps]);\n\n  return (\n    <Modal isOpen={isOpen} data-test='card-modal' className={classes.cardModal}>\n      <ModalHeader className='card-modal-header'>\n        <div style={{ display: componentProps.hideKey ? 'none' : 'initial' }}>\n          <h3>Additional Settings</h3>\n        </div>\n      </ModalHeader>\n      <ModalBody className='card-modal-entries'>\n        <TypeSpecificParameters\n          parameters={componentPropsState}\n          onChange={(newState: any) => {\n            setComponentProps({\n              ...componentPropsState,\n              ...newState,\n            });\n          }}\n        />\n        <DependencyField\n          parameters={(componentPropsState: { [string]: any })}\n          onChange={(newState: any) => {\n            setComponentProps({\n              ...componentPropsState,\n              ...newState,\n            });\n          }}\n        />\n      </ModalBody>\n      <ModalFooter>\n        <Button\n          onClick={() => {\n            onClose();\n            onChange(componentPropsState);\n          }}\n          color='primary'\n        >\n          Save\n        </Button>\n        <Button\n          onClick={() => {\n            onClose();\n            setComponentProps(componentProps);\n          }}\n          color='secondary'\n        >\n          Cancel\n        </Button>\n      </ModalFooter>\n    </Modal>\n  );\n}\n","// @flow\n\nimport * as React from 'react';\nimport { getCardBody } from './utils';\nimport type { Parameters, Mods, FormInput } from './types';\n\n// specify the inputs required for any type of object\nexport default function GeneralParameterInputs({\n  category,\n  parameters,\n  onChange,\n  mods,\n  allFormInputs,\n}: {\n  category: string,\n  parameters: Parameters,\n  onChange: (newParams: Parameters) => void,\n  mods?: Mods,\n  allFormInputs: { [string]: FormInput },\n}) {\n  const CardBody = getCardBody(category, allFormInputs);\n  return (\n    <div>\n      <CardBody parameters={parameters} onChange={onChange} mods={mods || {}} />\n    </div>\n  );\n}\n","// @flow\n\nimport React from 'react';\nimport Select from 'react-select';\nimport { Input } from 'reactstrap';\nimport classnames from 'classnames';\nimport GeneralParameterInputs from './GeneralParameterInputs';\nimport {\n  defaultUiProps,\n  defaultDataProps,\n  categoryToNameMap,\n  categoryType,\n  subtractArray,\n  getRandomId,\n} from './utils';\nimport type { Parameters, Mods, FormInput } from './types';\nimport Tooltip from './Tooltip';\n\n// specify the inputs required for any type of object\nexport default function CardGeneralParameterInputs({\n  parameters,\n  onChange,\n  allFormInputs,\n  mods,\n  showObjectNameInput = true,\n}: {\n  parameters: Parameters,\n  onChange: (newParams: Parameters) => void,\n  mods?: Mods,\n  allFormInputs: { [string]: FormInput },\n  showObjectNameInput?: boolean,\n}) {\n  const [keyState, setKeyState] = React.useState(parameters.name);\n  const [titleState, setTitleState] = React.useState(parameters.title);\n  const [descriptionState, setDescriptionState] = React.useState(\n    parameters.description,\n  );\n  const [elementId] = React.useState(getRandomId());\n  const categoryMap = categoryToNameMap(parameters.category, allFormInputs);\n\n  const fetchLabel = (labelName: string, defaultLabel: string): string => {\n    return mods && mods.labels && typeof mods.labels[labelName] === 'string'\n      ? mods.labels[labelName]\n      : defaultLabel;\n  };\n\n  const objectNameLabel = fetchLabel('objectNameLabel', 'Object Name');\n  const displayNameLabel = fetchLabel('displayNameLabel', 'Display Name');\n  const descriptionLabel = fetchLabel('descriptionLabel', 'Description');\n  const inputTypeLabel = fetchLabel('inputTypeLabel', 'Input Type');\n\n  const availableInputTypes = () => {\n    const definitionsInSchema =\n      parameters.definitionData &&\n      Object.keys(parameters.definitionData).length !== 0;\n\n    // Hide the \"Reference\" option if there are no definitions in the schema\n    let inputKeys = Object.keys(categoryMap).filter(\n      (key) => key !== 'ref' || definitionsInSchema,\n    );\n\n    // Exclude hidden inputs based on mods\n    if (mods) inputKeys = subtractArray(inputKeys, mods.deactivatedFormInputs);\n\n    return inputKeys.map((key) => ({ value: key, label: categoryMap[key] }));\n  };\n\n  return (\n    <div>\n      {showObjectNameInput && (\n        <div className='card-entry'>\n          <h5>\n            {`${objectNameLabel} `}\n            <Tooltip\n              text={\n                mods &&\n                mods.tooltipDescriptions &&\n                typeof mods.tooltipDescriptions.cardObjectName === 'string'\n                  ? mods.tooltipDescriptions.cardObjectName\n                  : 'The back-end name of the object'\n              }\n              id={`${elementId}_nameinfo`}\n              type='help'\n            />\n          </h5>\n\n          <Input\n            value={keyState || ''}\n            placeholder='Key'\n            type='text'\n            onChange={(ev: SyntheticInputEvent<HTMLInputElement>) =>\n              setKeyState(ev.target.value)\n            }\n            onBlur={(ev: SyntheticInputEvent<HTMLInputElement>) =>\n              onChange({\n                ...parameters,\n                name: ev.target.value,\n              })\n            }\n            className='card-text'\n          />\n        </div>\n      )}\n      <div\n        className={`card-entry ${\n          parameters.$ref === undefined ? '' : 'disabled-input'\n        }`}\n      >\n        <h5>\n          {`${displayNameLabel} `}\n          <Tooltip\n            text={\n              mods &&\n              mods.tooltipDescriptions &&\n              typeof mods.tooltipDescriptions.cardDisplayName === 'string'\n                ? mods.tooltipDescriptions.cardDisplayName\n                : 'The user-facing name of this object'\n            }\n            id={`${elementId}-titleinfo`}\n            type='help'\n          />\n        </h5>\n        <Input\n          value={titleState || ''}\n          placeholder='Title'\n          type='text'\n          onChange={(ev: SyntheticInputEvent<HTMLInputElement>) =>\n            setTitleState(ev.target.value)\n          }\n          onBlur={(ev: SyntheticInputEvent<HTMLInputElement>) => {\n            onChange({ ...parameters, title: ev.target.value });\n          }}\n          className='card-text'\n        />\n      </div>\n      <div className={`card-entry ${parameters.$ref ? 'disabled-input' : ''}`}>\n        <h5>\n          {`${descriptionLabel} `}\n          <Tooltip\n            text={\n              mods &&\n              mods.tooltipDescriptions &&\n              typeof mods.tooltipDescriptions.cardDescription === 'string'\n                ? mods.tooltipDescriptions.cardDescription\n                : 'This will appear as help text on the form'\n            }\n            id={`${elementId}-descriptioninfo`}\n            type='help'\n          />\n        </h5>\n        <Input\n          value={descriptionState || ''}\n          placeholder='Description'\n          type='text'\n          onChange={(ev: SyntheticInputEvent<HTMLInputElement>) =>\n            setDescriptionState(ev.target.value)\n          }\n          onBlur={(ev: SyntheticInputEvent<HTMLInputElement>) => {\n            onChange({ ...parameters, description: ev.target.value });\n          }}\n          className='card-text'\n        />\n      </div>\n      <div\n        className={classnames('card-entry', {\n          'wide-card-entry': !showObjectNameInput,\n        })}\n      >\n        <h5>\n          {`${inputTypeLabel} `}\n          <Tooltip\n            text={\n              mods &&\n              mods.tooltipDescriptions &&\n              typeof mods.tooltipDescriptions.cardInputType === 'string'\n                ? mods.tooltipDescriptions.cardInputType\n                : 'The type of form input displayed on the form'\n            }\n            id={`${elementId}-inputinfo`}\n            type='help'\n          />\n        </h5>\n        <Select\n          value={{\n            value: parameters.category,\n            label: categoryMap[parameters.category],\n          }}\n          placeholder='Category'\n          options={availableInputTypes()}\n          onChange={(val: any) => {\n            // figure out the new 'type'\n            const newCategory = val.value;\n\n            const newProps = {\n              ...defaultUiProps(newCategory, allFormInputs),\n              ...defaultDataProps(newCategory, allFormInputs),\n              name: parameters.name,\n              required: parameters.required,\n            };\n            if (newProps.$ref !== undefined && !newProps.$ref) {\n              // assign an initial reference\n              const firstDefinition = Object.keys(parameters.definitionData)[0];\n              newProps.$ref = `#/definitions/${firstDefinition || 'empty'}`;\n            }\n            onChange({\n              ...newProps,\n              title: newProps.title || parameters.title,\n              default: newProps.default || '',\n              type: newProps.type || categoryType(newCategory, allFormInputs),\n              category: newProps.category || newCategory,\n            });\n          }}\n          className='card-select'\n        />\n      </div>\n      <div className='card-category-options'>\n        <GeneralParameterInputs\n          category={parameters.category}\n          parameters={parameters}\n          onChange={onChange}\n          mods={mods}\n          allFormInputs={allFormInputs}\n        />\n      </div>\n    </div>\n  );\n}\n","// @flow\n\nimport React, { useState } from 'react';\nimport {\n  Popover,\n  PopoverHeader,\n  PopoverBody,\n  UncontrolledTooltip,\n  Button,\n} from 'reactstrap';\nimport { createUseStyles } from 'react-jss';\nimport { faPlusSquare } from '@fortawesome/free-solid-svg-icons';\nimport FontAwesomeIcon from './FontAwesomeIcon';\nimport FBRadioGroup from './radio/FBRadioGroup';\nimport { getRandomId } from './utils';\n\nconst useStyles = createUseStyles({\n  addDetails: {\n    '& .popover': {\n      width: '300px',\n      'z-index': '1051 !important',\n      '& .popover-inner': {\n        border: '1px solid #1d71ad',\n        borderRadius: '4px',\n        '& .popover-header': { borderBottom: '1px solid #1d71ad' },\n        '& .action-buttons': {\n          display: 'flex',\n          justifyContent: 'space-between',\n          marginTop: '.5em',\n        },\n      },\n    },\n  },\n});\n\nexport default function Add({\n  addElem,\n  hidden,\n}: {\n  addElem: (choice: string) => void,\n  hidden?: boolean,\n}) {\n  const classes = useStyles();\n  const [popoverOpen, setPopoverOpen] = useState(false);\n  const [createChoice, setCreateChoice] = useState('card');\n  const [elementId] = useState(getRandomId());\n\n  return (\n    <div style={{ display: hidden ? 'none' : 'initial' }}>\n      <span id={`${elementId}_add`}>\n        <FontAwesomeIcon\n          icon={faPlusSquare}\n          onClick={() => setPopoverOpen(true)}\n        />\n      </span>\n      <UncontrolledTooltip placement='top' target={`${elementId}_add`}>\n        Create new form element\n      </UncontrolledTooltip>\n      <Popover\n        placement='bottom'\n        target={`${elementId}_add`}\n        isOpen={popoverOpen}\n        toggle={() => setPopoverOpen(false)}\n        className={`add-details ${classes.addDetails}`}\n        id={`${elementId}_add_popover`}\n      >\n        <PopoverHeader>Create New</PopoverHeader>\n        <PopoverBody>\n          <FBRadioGroup\n            className='choose-create'\n            defaultValue={createChoice}\n            horizontal={false}\n            options={[\n              {\n                value: 'card',\n                label: 'Form element',\n              },\n              {\n                value: 'section',\n                label: 'Form section',\n              },\n            ]}\n            onChange={(selection) => {\n              setCreateChoice(selection);\n            }}\n          />\n          <div className='action-buttons'>\n            <Button onClick={() => setPopoverOpen(false)} color='secondary'>\n              Cancel\n            </Button>\n            <Button\n              onClick={() => {\n                addElem(createChoice);\n                setPopoverOpen(false);\n              }}\n              color='primary'\n            >\n              Create\n            </Button>\n          </div>\n        </PopoverBody>\n      </Popover>\n    </div>\n  );\n}\n","// @flow\n\nimport * as React from 'react';\nimport { UncontrolledTooltip } from 'reactstrap';\nimport { createUseStyles } from 'react-jss';\nimport {\n  faArrowUp,\n  faArrowDown,\n  faPencilAlt,\n  faTrash,\n} from '@fortawesome/free-solid-svg-icons';\nimport FBCheckbox from './checkbox/FBCheckbox';\nimport Collapse from './Collapse/Collapse';\nimport CardModal from './CardModal';\nimport CardGeneralParameterInputs from './CardGeneralParameterInputs';\nimport Add from './Add';\nimport FontAwesomeIcon from './FontAwesomeIcon';\nimport Tooltip from './Tooltip';\nimport { getRandomId } from './utils';\nimport type { Parameters, Mods, FormInput } from './types';\n\nconst useStyles = createUseStyles({\n  cardEntries: {\n    'border-bottom': '1px solid gray',\n    margin: '.5em 1.5em 0 1.5em',\n    '& h5': {\n      color: 'black',\n      'font-size': '14px',\n      'font-weight': 'bold',\n    },\n    '& .card-entry': {\n      display: 'inline-block',\n      margin: 0,\n      width: '50%',\n      'text-align': 'left',\n      padding: '0.5em',\n      '&.wide-card-entry': {\n        width: '100%',\n      },\n    },\n    '& input': {\n      border: '1px solid gray',\n      'border-radius': '4px',\n    },\n    '& .card-category-options': {\n      padding: '.5em',\n    },\n    '& .card-select': {\n      border: '1px solid var(--gray)',\n      'border-radius': '4px',\n    },\n    '& .card-array': {\n      '& .fa-plus-square': { display: 'none' },\n      '& .section-entries': { '& .fa-plus-square': { display: 'initial' } },\n    },\n    '& .card-enum': {\n      display: 'flex',\n      flexDirection: 'column',\n      width: '100%',\n      backgroundColor: 'var(--light-gray)',\n      textAlign: 'left',\n      padding: '1em',\n      '& h3': { fontSize: '16px', margin: '0 0 .5em 0' },\n      '& label': { color: 'black', fontSize: '14px' },\n      '& .card-enum-header': {\n        marginTop: '0.5em',\n        width: '100%',\n        display: 'flex',\n        flexDirection: 'row',\n        '& h5': { width: '50%', fontWeight: 'bold', fontSize: '14px' },\n      },\n      '& .fa': { cursor: 'pointer' },\n    },\n  },\n  cardInteractions: {\n    margin: '.5em 1.5em',\n    textAlign: 'left',\n    '& .fa': {\n      marginRight: '1em',\n      borderRadius: '4px',\n      padding: '.25em',\n      height: '25px',\n      width: '25px',\n    },\n    '& .fa-arrow-up, .fa-arrow-down': { marginRight: '.5em' },\n    '& .fa-trash': { border: '1px solid #DE5354', color: '#DE5354' },\n    '& .fb-checkbox': { display: 'inline-block' },\n    '& .interactions-left, & .interactions-right': {\n      display: 'inline-block',\n      width: '48%',\n      margin: '0 auto',\n    },\n    '& .interactions-left': { textAlign: 'left' },\n    '& .interactions-right': { textAlign: 'right' },\n  },\n});\n\nexport default function Card({\n  componentProps,\n  onChange,\n  onDelete,\n  onMoveUp,\n  onMoveDown,\n  TypeSpecificParameters,\n  addElem,\n  cardOpen,\n  setCardOpen,\n  allFormInputs,\n  mods,\n  showObjectNameInput = true,\n}: {\n  componentProps: {\n    [string]: string | number | boolean | Array<string | number>,\n    path: string,\n  },\n  onChange: ({ [string]: any }) => void,\n  onDelete?: () => void,\n  onMoveUp?: () => void,\n  onMoveDown?: () => void,\n  TypeSpecificParameters: React.AbstractComponent<{\n    parameters: Parameters,\n    onChange: (newParams: Parameters) => void,\n  }>,\n  addElem?: (choice: string) => void,\n  cardOpen: boolean,\n  setCardOpen: (newState: boolean) => void,\n  mods?: Mods,\n  allFormInputs: { [string]: FormInput },\n  showObjectNameInput?: boolean,\n}) {\n  const classes = useStyles();\n  const [modalOpen, setModalOpen] = React.useState(false);\n  const [elementId] = React.useState(getRandomId());\n\n  return (\n    <React.Fragment>\n      <Collapse\n        isOpen={cardOpen}\n        toggleCollapse={() => setCardOpen(!cardOpen)}\n        title={\n          <React.Fragment>\n            <span onClick={() => setCardOpen(!cardOpen)} className='label'>\n              {componentProps.title || componentProps.name}{' '}\n              {componentProps.parent ? (\n                <Tooltip\n                  text={`Depends on ${(componentProps.parent: any)}`}\n                  id={`${elementId}_parentinfo`}\n                  type='alert'\n                />\n              ) : (\n                ''\n              )}\n              {componentProps.$ref !== undefined ? (\n                <Tooltip\n                  text={`Is an instance of pre-configured component ${(componentProps.$ref: any)}`}\n                  id={`${elementId}_refinfo`}\n                  type='alert'\n                />\n              ) : (\n                ''\n              )}\n            </span>\n            <span className='arrows'>\n              <span id={`${elementId}_moveupbiginfo`}>\n                <FontAwesomeIcon\n                  icon={faArrowUp}\n                  onClick={() => (onMoveUp ? onMoveUp() : {})}\n                />\n              </span>\n              <UncontrolledTooltip\n                placement='top'\n                target={`${elementId}_moveupbiginfo`}\n              >\n                Move form element up\n              </UncontrolledTooltip>\n              <span id={`${elementId}_movedownbiginfo`}>\n                <FontAwesomeIcon\n                  icon={faArrowDown}\n                  onClick={() => (onMoveDown ? onMoveDown() : {})}\n                />\n              </span>\n              <UncontrolledTooltip\n                placement='top'\n                target={`${elementId}_movedownbiginfo`}\n              >\n                Move form element down\n              </UncontrolledTooltip>\n            </span>\n          </React.Fragment>\n        }\n        className={`card-container ${\n          componentProps.dependent ? 'card-dependent' : ''\n        } ${componentProps.$ref === undefined ? '' : 'card-reference'}`}\n      >\n        <div className={classes.cardEntries}>\n          <CardGeneralParameterInputs\n            parameters={(componentProps: any)}\n            onChange={onChange}\n            allFormInputs={allFormInputs}\n            mods={mods}\n            showObjectNameInput={showObjectNameInput}\n          />\n        </div>\n        <div className={classes.cardInteractions}>\n          <span id={`${elementId}_editinfo`}>\n            <FontAwesomeIcon\n              icon={faPencilAlt}\n              onClick={() => setModalOpen(true)}\n            />\n          </span>\n          <UncontrolledTooltip placement='top' target={`${elementId}_editinfo`}>\n            Additional configurations for this form element\n          </UncontrolledTooltip>\n          <span id={`${elementId}_trashinfo`}>\n            <FontAwesomeIcon icon={faTrash} onClick={onDelete || (() => {})} />\n          </span>\n          <UncontrolledTooltip\n            placement='top'\n            target={`${elementId}_trashinfo`}\n          >\n            Delete form element\n          </UncontrolledTooltip>\n          <FBCheckbox\n            onChangeValue={() =>\n              onChange({\n                ...componentProps,\n                required: !componentProps.required,\n              })\n            }\n            isChecked={!!componentProps.required}\n            label='Required'\n            id={`${elementId}_required`}\n          />\n        </div>\n        <CardModal\n          componentProps={componentProps}\n          isOpen={modalOpen}\n          onClose={() => setModalOpen(false)}\n          onChange={(newComponentProps: {\n            [string]: string | number | boolean | Array<string | number>,\n          }) => {\n            onChange(newComponentProps);\n          }}\n          TypeSpecificParameters={TypeSpecificParameters}\n        />\n      </Collapse>\n      {addElem ? <Add addElem={(choice: string) => addElem(choice)} /> : ''}\n    </React.Fragment>\n  );\n}\n","// @flow\nimport * as React from 'react';\nimport { Input } from 'reactstrap';\nimport Select from 'react-select';\nimport { createUseStyles } from 'react-jss';\nimport FBCheckbox from '../checkbox/FBCheckbox';\nimport CardEnumOptions from '../CardEnumOptions';\nimport { getRandomId } from '../utils';\nimport type { Parameters } from '../types';\n\nconst useStyles = createUseStyles({\n  hidden: {\n    display: 'none',\n  },\n});\n\n// specify the inputs required for a string type object\nexport function CardDefaultParameterInputs() {\n  return <div />;\n}\n\nfunction TimeField({\n  parameters,\n  onChange,\n}: {\n  parameters: Parameters,\n  onChange: (newParams: Parameters) => void,\n}) {\n  return (\n    <React.Fragment>\n      <h5>Default time</h5>\n      <Input\n        value={parameters.default || ''}\n        placeholder='Default'\n        type='datetime-local'\n        onChange={(ev: SyntheticInputEvent<HTMLInputElement>) =>\n          onChange({ ...parameters, default: ev.target.value })\n        }\n        className='card-text'\n      />\n    </React.Fragment>\n  );\n}\n\nfunction Checkbox({\n  parameters,\n  onChange,\n}: {\n  parameters: Parameters,\n  onChange: (newParams: Parameters) => void,\n}) {\n  return (\n    <div className='card-boolean'>\n      <FBCheckbox\n        onChangeValue={() => {\n          onChange({\n            ...parameters,\n            default: parameters.default ? parameters.default !== true : true,\n          });\n        }}\n        isChecked={parameters.default ? parameters.default === true : false}\n        label='Default'\n      />\n    </div>\n  );\n}\n\nfunction MultipleChoice({\n  parameters,\n  onChange,\n}: {\n  parameters: Parameters,\n  onChange: (newParams: Parameters) => void,\n}) {\n  const classes = useStyles();\n  const enumArray = Array.isArray(parameters.enum) ? parameters.enum : [];\n  // eslint-disable-next-line no-restricted-globals\n  const containsUnparsableString = enumArray.some((val) => isNaN(val));\n  const containsString =\n    containsUnparsableString ||\n    enumArray.some((val) => typeof val === 'string');\n  const [isNumber, setIsNumber] = React.useState(\n    !!enumArray.length && !containsString,\n  );\n  const [elementId] = React.useState(getRandomId());\n  return (\n    <div className='card-enum'>\n      <h3>Possible Values</h3>\n      <FBCheckbox\n        onChangeValue={() => {\n          if (Array.isArray(parameters.enumNames)) {\n            // remove the enumNames\n            onChange({\n              ...parameters,\n              enumNames: null,\n            });\n          } else {\n            // create enumNames as a copy of enum values\n            onChange({\n              ...parameters,\n              enumNames: enumArray.map((val) => `${val}`),\n            });\n          }\n        }}\n        isChecked={Array.isArray(parameters.enumNames)}\n        label='Display label is different from value'\n        id={`${elementId}_different`}\n      />\n      <div\n        className={\n          containsUnparsableString || !enumArray.length ? classes.hidden : ''\n        }\n      >\n        <FBCheckbox\n          onChangeValue={() => {\n            if (containsString || !isNumber) {\n              // attempt converting enum values into numbers\n              try {\n                const newEnum = enumArray.map((val) => {\n                  let newNum = 0;\n                  if (val) newNum = parseFloat(val) || 0;\n                  if (Number.isNaN(newNum))\n                    throw new Error(`Could not convert ${val}`);\n                  return newNum;\n                });\n                setIsNumber(true);\n                onChange({\n                  ...parameters,\n                  enum: newEnum,\n                });\n              } catch (error) {\n                // eslint-disable-next-line no-console\n                console.error(error);\n              }\n            } else {\n              // convert enum values back into strings\n              const newEnum = enumArray.map((val) => `${val || 0}`);\n              setIsNumber(false);\n              onChange({\n                ...parameters,\n                enum: newEnum,\n              });\n            }\n          }}\n          isChecked={isNumber}\n          disabled={containsUnparsableString}\n          label='Force number'\n          id={`${elementId}_forceNumber`}\n        />\n      </div>\n      <CardEnumOptions\n        initialValues={enumArray}\n        names={\n          Array.isArray(parameters.enumNames)\n            ? parameters.enumNames.map((val) => `${val}`)\n            : undefined\n        }\n        showNames={Array.isArray(parameters.enumNames)}\n        onChange={(newEnum: Array<string>, newEnumNames?: Array<string>) =>\n          onChange({\n            ...parameters,\n            enum: newEnum,\n            enumNames: newEnumNames,\n          })\n        }\n        type={isNumber ? 'number' : 'string'}\n      />\n    </div>\n  );\n}\n\nfunction RefChoice({\n  parameters,\n  onChange,\n}: {\n  parameters: Parameters,\n  onChange: (newParams: Parameters) => void,\n}) {\n  return (\n    <div className='card-select'>\n      <Select\n        value={{\n          value: parameters.$ref,\n          label: parameters.$ref,\n        }}\n        placeholder='Reference'\n        options={Object.keys(parameters.definitionData || {}).map((key) => ({\n          value: `#/definitions/${key}`,\n          label: `#/definitions/${key}`,\n        }))}\n        onChange={(val: any) => {\n          onChange({ ...parameters, $ref: val.value });\n        }}\n        className='card-select'\n      />\n    </div>\n  );\n}\n\nconst defaultInputs = {\n  time: {\n    displayName: 'Time',\n    matchIf: [\n      {\n        types: ['string'],\n        format: 'date-time',\n      },\n    ],\n    defaultDataSchema: {\n      format: 'date-time',\n    },\n    defaultUiSchema: {},\n    type: 'string',\n    cardBody: TimeField,\n    modalBody: CardDefaultParameterInputs,\n  },\n  checkbox: {\n    displayName: 'Checkbox',\n    matchIf: [\n      {\n        types: ['boolean'],\n      },\n    ],\n    defaultDataSchema: {},\n    defaultUiSchema: {},\n    type: 'boolean',\n    cardBody: Checkbox,\n    modalBody: CardDefaultParameterInputs,\n  },\n  ref: {\n    displayName: 'Reference',\n    matchIf: [\n      {\n        types: [null],\n        $ref: true,\n      },\n    ],\n    defaultDataSchema: {\n      $ref: '',\n      title: '',\n      description: '',\n    },\n    defaultUiSchema: {},\n    type: null,\n    cardBody: RefChoice,\n    modalBody: CardDefaultParameterInputs,\n  },\n  radio: {\n    displayName: 'Radio',\n    matchIf: [\n      {\n        types: ['string', 'number', 'integer', 'array', 'boolean', null],\n        widget: 'radio',\n        enum: true,\n      },\n    ],\n    defaultDataSchema: { enum: [] },\n    defaultUiSchema: {\n      'ui:widget': 'radio',\n    },\n    type: 'string',\n    cardBody: MultipleChoice,\n    modalBody: CardDefaultParameterInputs,\n  },\n  dropdown: {\n    displayName: 'Dropdown',\n    matchIf: [\n      {\n        types: ['string', 'number', 'integer', 'array', 'boolean', null],\n        enum: true,\n      },\n    ],\n    defaultDataSchema: { enum: [] },\n    defaultUiSchema: {},\n    type: 'string',\n    cardBody: MultipleChoice,\n    modalBody: CardDefaultParameterInputs,\n  },\n};\n\nexport default defaultInputs;\n","// @flow\nimport React, { useState } from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport Select from 'react-select';\nimport { createUseStyles } from 'react-jss';\nimport { Alert, Input, UncontrolledTooltip } from 'reactstrap';\nimport {\n  faArrowUp,\n  faArrowDown,\n  faPencilAlt,\n  faTrash,\n} from '@fortawesome/free-solid-svg-icons';\nimport FBCheckbox from './checkbox/FBCheckbox';\nimport Collapse from './Collapse/Collapse';\nimport CardModal from './CardModal';\nimport { CardDefaultParameterInputs } from './defaults/defaultInputs';\nimport Tooltip from './Tooltip';\nimport Add from './Add';\nimport Card from './Card';\nimport {\n  checkForUnsupportedFeatures,\n  generateElementComponentsFromSchemas,\n  countElementsFromSchema,\n  addCardObj,\n  addSectionObj,\n  onDragEnd,\n} from './utils';\nimport FontAwesomeIcon from './FontAwesomeIcon';\nimport { getRandomId } from './utils';\nimport type { FormInput, Mods } from './types';\n\nconst useStyles = createUseStyles({\n  sectionContainer: {\n    '& .section-head': {\n      borderBottom: '1px solid var(--gray)',\n      margin: '0.5em 1.5em 0 1.5em',\n      '& h5': {\n        color: 'black',\n        fontSize: '14px',\n        fontWeight: 'bold',\n        margin: '0',\n      },\n      '& .section-entry': {\n        display: 'inline-block',\n        margin: '0',\n        width: '33%',\n        textAlign: 'left',\n        padding: '0.5em',\n      },\n      '& .section-reference': { width: '100%' },\n    },\n    '& .section-footer': {\n      marginTop: '1em',\n      textAlign: 'center',\n      '& .fa': { cursor: 'pointer' },\n    },\n    '& .section-interactions': {\n      margin: '0.5em 1.5em',\n      textAlign: 'left',\n      borderTop: '1px solid var(--gray)',\n      paddingTop: '1em',\n      '& .fa': {\n        marginRight: '1em',\n        borderRadius: '4px',\n        padding: '0.25em',\n        height: '25px',\n        width: '25px',\n      },\n      '& .fa-pencil-alt, & .fa-arrow-up, & .fa-arrow-down': {\n        border: '1px solid #1d71ad',\n        color: '#1d71ad',\n      },\n      '& .fa-trash': { border: '1px solid #de5354', color: '#de5354' },\n      '& .fa-arrow-up, & .fa-arrow-down': { marginRight: '0.5em' },\n      '& .fb-checkbox': {\n        display: 'inline-block',\n        label: { color: '#9aa4ab' },\n      },\n      '& .interactions-left, & .interactions-right': {\n        display: 'inline-block',\n        width: '48%',\n        margin: '0 auto',\n      },\n      '& .interactions-left': { textAlign: 'left' },\n      '& .interactions-right': { textAlign: 'right' },\n    },\n  },\n});\n\nexport default function Section({\n  name,\n  required,\n  schema,\n  uischema,\n  onChange,\n  onNameChange,\n  onRequireToggle,\n  onDependentsChange,\n  onDelete,\n  onMoveUp,\n  onMoveDown,\n  path,\n  definitionData,\n  definitionUi,\n  hideKey,\n  reference,\n  dependents,\n  dependent,\n  parent,\n  neighborNames,\n  addElem,\n  cardOpen,\n  setCardOpen,\n  allFormInputs,\n  mods,\n  categoryHash,\n}: {\n  name: string,\n  required: boolean,\n  schema: { [string]: any },\n  uischema: { [string]: any },\n  onChange: (\n    schema: { [string]: any },\n    uischema: { [string]: any },\n    ref?: string,\n  ) => void,\n  onNameChange: (string) => void,\n  onDependentsChange: (\n    Array<{\n      children: Array<string>,\n      value?: any,\n    }>,\n  ) => void,\n  onRequireToggle: () => any,\n  onDelete: () => any,\n  onMoveUp?: () => any,\n  onMoveDown?: () => any,\n  path: string,\n  definitionData: { [string]: any },\n  definitionUi: { [string]: any },\n  hideKey?: boolean,\n  reference?: string,\n  dependents?: Array<{\n    children: Array<string>,\n    value?: any,\n  }>,\n  dependent?: boolean,\n  parent?: string,\n  neighborNames?: Array<string>,\n  addElem?: (choice: string) => void,\n  cardOpen: boolean,\n  setCardOpen: (newState: boolean) => void,\n  allFormInputs: { [string]: FormInput },\n  mods?: Mods,\n  categoryHash: { [string]: string },\n}) {\n  const classes = useStyles();\n  const unsupportedFeatures = checkForUnsupportedFeatures(\n    schema || {},\n    uischema || {},\n    allFormInputs,\n  );\n  const schemaData = schema || {};\n  const elementNum = countElementsFromSchema(schemaData);\n  const defaultCollapseStates = [...Array(elementNum)].map(() => false);\n  const [cardOpenArray, setCardOpenArray] = React.useState(\n    defaultCollapseStates,\n  );\n  // keep name in state to avoid losing focus\n  const [keyName, setKeyName] = React.useState(name);\n  // keep requirements in state to avoid rapid updates\n  const [modalOpen, setModalOpen] = React.useState(false);\n  const [elementId] = React.useState(getRandomId());\n\n  return (\n    <React.Fragment>\n      <Collapse\n        isOpen={cardOpen}\n        toggleCollapse={() => setCardOpen(!cardOpen)}\n        title={\n          <React.Fragment>\n            <span onClick={() => setCardOpen(!cardOpen)} className='label'>\n              {schemaData.title || keyName}{' '}\n              {parent ? (\n                <Tooltip\n                  text={`Depends on ${parent}`}\n                  id={`${elementId}_parentinfo`}\n                  type='alert'\n                />\n              ) : (\n                ''\n              )}\n            </span>\n            <span className='arrows'>\n              <span id={`${elementId}_moveupbiginfo`}>\n                <FontAwesomeIcon\n                  icon={faArrowUp}\n                  onClick={() => (onMoveUp ? onMoveUp() : {})}\n                />\n              </span>\n              <UncontrolledTooltip\n                placement='top'\n                target={`${elementId}_moveupbiginfo`}\n              >\n                Move form element up\n              </UncontrolledTooltip>\n              <span id={`${elementId}_movedownbiginfo`}>\n                <FontAwesomeIcon\n                  icon={faArrowDown}\n                  onClick={() => (onMoveDown ? onMoveDown() : {})}\n                />\n              </span>\n              <UncontrolledTooltip\n                placement='top'\n                target={`${elementId}_movedownbiginfo`}\n              >\n                Move form element down\n              </UncontrolledTooltip>\n            </span>\n          </React.Fragment>\n        }\n        className={`section-container ${classes.sectionContainer} ${\n          dependent ? 'section-dependent' : ''\n        } ${reference ? 'section-reference' : ''}`}\n      >\n        <div\n          className={`section-entries ${reference ? 'section-reference' : ''}`}\n        >\n          <div className='section-head'>\n            {reference ? (\n              <div className='section-entry section-reference'>\n                <h5>Reference Section</h5>\n                <Select\n                  value={{\n                    value: reference,\n                    label: reference,\n                  }}\n                  placeholder='Reference'\n                  options={Object.keys(definitionData).map((key) => ({\n                    value: `#/definitions/${key}`,\n                    label: `#/definitions/${key}`,\n                  }))}\n                  onChange={(val: any) => {\n                    onChange(schema, uischema, val.value);\n                  }}\n                  className='section-select'\n                />\n              </div>\n            ) : (\n              ''\n            )}\n            <div className='section-entry' data-test='section-object-name'>\n              <h5>\n                Section Object Name{' '}\n                <Tooltip\n                  text={\n                    mods &&\n                    mods.tooltipDescriptions &&\n                    mods.tooltipDescriptions &&\n                    typeof mods.tooltipDescriptions.cardSectionObjectName ===\n                      'string'\n                      ? mods.tooltipDescriptions.cardSectionObjectName\n                      : 'The key to the object that will represent this form section.'\n                  }\n                  id={`${elementId}_nameinfo`}\n                  type='help'\n                />\n              </h5>\n              <Input\n                value={keyName || ''}\n                placeholder='Key'\n                type='text'\n                onChange={(ev: SyntheticInputEvent<HTMLInputElement>) =>\n                  setKeyName(ev.target.value)\n                }\n                onBlur={(ev: SyntheticInputEvent<HTMLInputElement>) =>\n                  onNameChange(ev.target.value)\n                }\n                className='card-text'\n                readOnly={hideKey}\n              />\n            </div>\n            <div className='section-entry' data-test='section-display-name'>\n              <h5>\n                Section Display Name{' '}\n                <Tooltip\n                  text={\n                    mods &&\n                    mods.tooltipDescriptions &&\n                    mods.tooltipDescriptions &&\n                    typeof mods.tooltipDescriptions.cardSectionDisplayName ===\n                      'string'\n                      ? mods.tooltipDescriptions.cardSectionDisplayName\n                      : 'The name of the form section that will be shown to users of the form.'\n                  }\n                  id={`${elementId}_titleinfo`}\n                  type='help'\n                />\n              </h5>\n              <Input\n                value={schemaData.title || ''}\n                placeholder='Title'\n                type='text'\n                onChange={(ev: SyntheticInputEvent<HTMLInputElement>) =>\n                  onChange(\n                    {\n                      ...schema,\n                      title: ev.target.value,\n                    },\n                    uischema,\n                  )\n                }\n                className='card-text'\n              />\n            </div>\n            <div className='section-entry' data-test='section-description'>\n              <h5>\n                Section Description{' '}\n                <Tooltip\n                  text={\n                    mods &&\n                    mods.tooltipDescriptions &&\n                    mods.tooltipDescriptions &&\n                    typeof mods.tooltipDescriptions.cardSectionDescription ===\n                      'string'\n                      ? mods.tooltipDescriptions.cardSectionDescription\n                      : 'A description of the section which will be visible on the form.'\n                  }\n                  id={`${elementId}_descriptioninfo`}\n                  type='help'\n                />\n              </h5>\n              <Input\n                value={schemaData.description || ''}\n                placeholder='Description'\n                type='text'\n                onChange={(ev: SyntheticInputEvent<HTMLInputElement>) =>\n                  onChange(\n                    {\n                      ...schema,\n                      description: ev.target.value,\n                    },\n                    uischema,\n                  )\n                }\n                className='card-text'\n              />\n            </div>\n            <Alert\n              style={{\n                display: unsupportedFeatures.length === 0 ? 'none' : 'block',\n              }}\n              color='warning'\n            >\n              <h5>Unsupported Features:</h5>\n              {unsupportedFeatures.map((message) => (\n                <li key={`${elementId}_${message}`}>{message}</li>\n              ))}\n            </Alert>\n          </div>\n          <div className='section-body'>\n            <DragDropContext\n              onDragEnd={(result) =>\n                onDragEnd(result, {\n                  schema,\n                  uischema,\n                  onChange,\n                  definitionData,\n                  definitionUi,\n                  categoryHash,\n                })\n              }\n              className='section-body'\n            >\n              <Droppable droppableId='droppable'>\n                {(providedDroppable) => (\n                  <div\n                    ref={providedDroppable.innerRef}\n                    {...providedDroppable.droppableProps}\n                  >\n                    {generateElementComponentsFromSchemas({\n                      schemaData: schema,\n                      uiSchemaData: uischema,\n                      onChange,\n                      path,\n                      definitionData,\n                      definitionUi,\n                      cardOpenArray,\n                      setCardOpenArray,\n                      allFormInputs,\n                      mods,\n                      categoryHash,\n                      Card,\n                      Section,\n                    }).map((element: any, index) => (\n                      <Draggable\n                        key={element.key}\n                        draggableId={element.key}\n                        index={index}\n                      >\n                        {(providedDraggable) => (\n                          <div\n                            ref={providedDraggable.innerRef}\n                            {...providedDraggable.draggableProps}\n                            {...providedDraggable.dragHandleProps}\n                          >\n                            {element}\n                          </div>\n                        )}\n                      </Draggable>\n                    ))}\n                    {providedDroppable.placeholder}\n                  </div>\n                )}\n              </Droppable>\n            </DragDropContext>\n          </div>\n          <div className='section-footer'>\n            <Add\n              addElem={(choice: string) => {\n                if (choice === 'card') {\n                  addCardObj({\n                    schema,\n                    uischema,\n                    mods,\n                    onChange,\n                    definitionData,\n                    definitionUi,\n                    categoryHash,\n                  });\n                } else if (choice === 'section') {\n                  addSectionObj({\n                    schema,\n                    uischema,\n                    onChange,\n                    definitionData,\n                    definitionUi,\n                    categoryHash,\n                  });\n                }\n              }}\n              hidden={\n                schemaData.properties &&\n                Object.keys(schemaData.properties).length !== 0\n              }\n            />\n          </div>\n          <div className='section-interactions'>\n            <span id={`${elementId}_editinfo`}>\n              <FontAwesomeIcon\n                icon={faPencilAlt}\n                onClick={() => setModalOpen(true)}\n              />\n            </span>\n            <UncontrolledTooltip\n              placement='top'\n              target={`${elementId}_editinfo`}\n            >\n              Additional configurations for this form element\n            </UncontrolledTooltip>\n            <span id={`${elementId}_trashinfo`}>\n              <FontAwesomeIcon\n                icon={faTrash}\n                onClick={() => (onDelete ? onDelete() : {})}\n              />\n            </span>\n            <UncontrolledTooltip\n              placement='top'\n              target={`${elementId}_trashinfo`}\n            >\n              Delete form element\n            </UncontrolledTooltip>\n            <FBCheckbox\n              onChangeValue={() => onRequireToggle()}\n              isChecked={required}\n              label='Required'\n              id={`${elementId}_required`}\n            />\n          </div>\n        </div>\n        <CardModal\n          componentProps={{\n            dependents,\n            neighborNames,\n            name: keyName,\n            schema,\n            type: 'object',\n          }}\n          isOpen={modalOpen}\n          onClose={() => setModalOpen(false)}\n          onChange={(newComponentProps: { [string]: any }) => {\n            onDependentsChange(newComponentProps.dependents);\n          }}\n          TypeSpecificParameters={CardDefaultParameterInputs}\n        />\n      </Collapse>\n      {addElem ? <Add addElem={(choice: string) => addElem(choice)} /> : ''}\n    </React.Fragment>\n  );\n}\n","// @flow\n\nexport const arrows = {\n  '& .arrows': {\n    float: 'right',\n    '& .fa-arrow-up, & .fa-arrow-down': {\n      'border-radius': '4px',\n      padding: '.25em',\n      margin: '0 .5em 0 0',\n      border: '1px solid #1d71ad',\n      color: '#1d71ad',\n      height: '28px',\n      width: '28px',\n    },\n  },\n};\n","// @flow\n\nimport React, { useState } from 'react';\nimport Select from 'react-select';\nimport { Input } from 'reactstrap';\nimport FBCheckbox from '../checkbox/FBCheckbox';\nimport Tooltip from '../Tooltip';\nimport { getRandomId } from '../utils';\nimport type { Parameters } from '../types';\n\nconst formatDictionary = {\n  '': 'None',\n  'date-time': 'Date-Time',\n  email: 'Email',\n  hostname: 'Hostname',\n  time: 'Time',\n  uri: 'URI',\n  regex: 'Regular Expression',\n};\n\nconst autoDictionary = {\n  '': 'None',\n  email: 'Email',\n  username: 'User Name',\n  password: 'Password',\n  'street-address': 'Street Address',\n  country: 'Country',\n};\n\n// specify the inputs required for a string type object\nfunction CardShortAnswerParameterInputs({\n  parameters,\n  onChange,\n}: {\n  parameters: Parameters,\n  onChange: (newParams: Parameters) => void,\n}) {\n  const [elementId] = useState(getRandomId());\n  return (\n    <div>\n      <h4>Minimum Length</h4>\n      <Input\n        value={parameters.minLength ? parameters.minLength : ''}\n        placeholder='Minimum Length'\n        key='minLength'\n        type='number'\n        onChange={(ev: SyntheticInputEvent<HTMLInputElement>) => {\n          onChange({\n            ...parameters,\n            minLength: parseInt(ev.target.value, 10),\n          });\n        }}\n        className='card-modal-number'\n      />\n      <h4>Maximum Length</h4>\n      <Input\n        value={parameters.maxLength ? parameters.maxLength : ''}\n        placeholder='Maximum Length'\n        key='maxLength'\n        type='number'\n        onChange={(ev: SyntheticInputEvent<HTMLInputElement>) => {\n          onChange({\n            ...parameters,\n            maxLength: parseInt(ev.target.value, 10),\n          });\n        }}\n        className='card-modal-number'\n      />\n      <h4>\n        Regular Expression Pattern{' '}\n        <a\n          href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions'\n          target='_blank'\n          rel='noopener noreferrer'\n        >\n          <Tooltip\n            id={`${elementId}_regex`}\n            type='help'\n            text='Regular expression pattern that this must satisfy'\n          />\n        </a>\n      </h4>\n      <Input\n        value={parameters.pattern ? parameters.pattern : ''}\n        placeholder='Regular Expression Pattern'\n        key='pattern'\n        type='text'\n        onChange={(ev: SyntheticInputEvent<HTMLInputElement>) => {\n          onChange({\n            ...parameters,\n            pattern: ev.target.value,\n          });\n        }}\n        className='card-modal-text'\n      />\n      <h4>\n        Format{' '}\n        <Tooltip\n          id={`${elementId}_format`}\n          type='help'\n          text='Require string input to match a certain common format'\n        />\n      </h4>\n      <Select\n        value={{\n          value: parameters.format\n            ? formatDictionary[\n                typeof parameters.format === 'string' ? parameters.format : ''\n              ]\n            : '',\n          label: parameters.format\n            ? formatDictionary[\n                typeof parameters.format === 'string' ? parameters.format : ''\n              ]\n            : 'None',\n        }}\n        placeholder='Format'\n        key='format'\n        options={Object.keys(formatDictionary).map((key) => ({\n          value: key,\n          label: formatDictionary[key],\n        }))}\n        onChange={(val: any) => {\n          onChange({\n            ...parameters,\n            format: val.value,\n          });\n        }}\n        className='card-modal-select'\n      />\n      <h5>\n        Auto Complete Category{' '}\n        <a\n          href='https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete'\n          target='_blank'\n          rel='noopener noreferrer'\n        >\n          <Tooltip\n            id={`${elementId}_autocomplete`}\n            type='help'\n            text=\"Suggest entries based on the user's browser history\"\n          />\n        </a>\n      </h5>\n      <Select\n        value={{\n          value: parameters['ui:autocomplete']\n            ? autoDictionary[\n                typeof parameters['ui:autocomplete'] === 'string'\n                  ? parameters['ui:autocomplete']\n                  : ''\n              ]\n            : '',\n          label: parameters['ui:autocomplete']\n            ? autoDictionary[\n                typeof parameters['ui:autocomplete'] === 'string'\n                  ? parameters['ui:autocomplete']\n                  : ''\n              ]\n            : 'None',\n        }}\n        placeholder='Auto Complete'\n        key='ui:autocomplete'\n        options={Object.keys(autoDictionary).map((key) => ({\n          value: key,\n          label: autoDictionary[key],\n        }))}\n        onChange={(val: any) => {\n          onChange({\n            ...parameters,\n            'ui:autocomplete': val.value,\n          });\n        }}\n        className='card-modal-select'\n      />\n      <div className='card-modal-boolean'>\n        <FBCheckbox\n          onChangeValue={() => {\n            onChange({\n              ...parameters,\n              'ui:autofocus': parameters['ui:autofocus']\n                ? parameters['ui:autofocus'] !== true\n                : true,\n            });\n          }}\n          isChecked={\n            parameters['ui:autofocus']\n              ? parameters['ui:autofocus'] === true\n              : false\n          }\n          label='Auto Focus'\n        />\n      </div>\n    </div>\n  );\n}\n\nfunction ShortAnswerField({\n  parameters,\n  onChange,\n}: {\n  parameters: Parameters,\n  onChange: (newParams: Parameters) => void,\n}) {\n  return (\n    <React.Fragment>\n      <h5>Default value</h5>\n      <Input\n        value={parameters.default}\n        placeholder='Default'\n        type='text'\n        onChange={(ev: SyntheticInputEvent<HTMLInputElement>) =>\n          onChange({ ...parameters, default: ev.target.value })\n        }\n        className='card-text'\n      />\n    </React.Fragment>\n  );\n}\n\nfunction Password({\n  parameters,\n  onChange,\n}: {\n  parameters: Parameters,\n  onChange: (newParams: Parameters) => void,\n}) {\n  return (\n    <React.Fragment>\n      <h5>Default password</h5>\n      <Input\n        value={parameters.default}\n        placeholder='Default'\n        type='password'\n        onChange={(ev: SyntheticInputEvent<HTMLInputElement>) =>\n          onChange({ ...parameters, default: ev.target.value })\n        }\n        className='card-text'\n      />\n    </React.Fragment>\n  );\n}\n\nconst shortAnswerInput = {\n  shortAnswer: {\n    displayName: 'Short Answer',\n    matchIf: [\n      {\n        types: ['string'],\n      },\n    ],\n    defaultDataSchema: {},\n    defaultUiSchema: {},\n    type: 'string',\n    cardBody: ShortAnswerField,\n    modalBody: CardShortAnswerParameterInputs,\n  },\n  password: {\n    displayName: 'Password',\n    matchIf: [\n      {\n        types: ['string'],\n        widget: 'password',\n      },\n    ],\n    defaultDataSchema: {},\n    defaultUiSchema: {\n      'ui:widget': 'password',\n    },\n    type: 'string',\n    cardBody: Password,\n    modalBody: CardShortAnswerParameterInputs,\n  },\n};\n\nexport default shortAnswerInput;\n","// @flow\n\nimport React, { useState } from 'react';\nimport Select from 'react-select';\nimport { Input } from 'reactstrap';\nimport FBCheckbox from '../checkbox/FBCheckbox';\nimport Tooltip from '../Tooltip';\nimport { getRandomId } from '../utils';\nimport type { Parameters } from '../types';\n\nconst formatDictionary = {\n  '': 'None',\n  'date-time': 'Date-Time',\n  email: 'Email',\n  hostname: 'Hostname',\n  time: 'Time',\n  uri: 'URI',\n  regex: 'Regular Expression',\n};\n\n// specify the inputs required for a string type object\nfunction CardLongAnswerParameterInputs({\n  parameters,\n  onChange,\n}: {\n  parameters: Parameters,\n  onChange: (newParams: Parameters) => void,\n}) {\n  const [elementId] = useState(getRandomId());\n  return (\n    <div>\n      <h4>Minimum Length</h4>\n      <Input\n        value={parameters.minLength ? parameters.minLength : ''}\n        placeholder='Minimum Length'\n        key='minLength'\n        type='number'\n        onChange={(ev: SyntheticInputEvent<HTMLInputElement>) => {\n          onChange({\n            ...parameters,\n            minLength: parseInt(ev.target.value, 10),\n          });\n        }}\n        className='card-modal-number'\n      />\n      <h4>Maximum Length</h4>\n      <Input\n        value={parameters.maxLength ? parameters.maxLength : ''}\n        placeholder='Maximum Length'\n        key='maxLength'\n        type='number'\n        onChange={(ev: SyntheticInputEvent<HTMLInputElement>) => {\n          onChange({\n            ...parameters,\n            maxLength: parseInt(ev.target.value, 10),\n          });\n        }}\n        className='card-modal-number'\n      />\n      <h4>\n        Regular Expression Pattern{' '}\n        <a href='https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions'>\n          <Tooltip\n            id={`${elementId}_regex`}\n            type='help'\n            text='Regular expression pattern that this must satisfy'\n          />\n        </a>\n      </h4>\n      <Input\n        value={parameters.pattern ? parameters.pattern : ''}\n        placeholder='Regular Expression Pattern'\n        key='pattern'\n        type='text'\n        onChange={(ev: SyntheticInputEvent<HTMLInputElement>) => {\n          onChange({\n            ...parameters,\n            pattern: ev.target.value,\n          });\n        }}\n        className='card-modal-text'\n      />\n      <h4>\n        Format{' '}\n        <Tooltip\n          id={`${elementId}_format`}\n          type='help'\n          text='Require string input to match a certain common format'\n        />\n      </h4>\n      <Select\n        value={{\n          value: parameters.format\n            ? formatDictionary[\n                typeof parameters.format === 'string' ? parameters.format : ''\n              ]\n            : '',\n          label: parameters.format\n            ? formatDictionary[\n                typeof parameters.format === 'string' ? parameters.format : ''\n              ]\n            : 'None',\n        }}\n        placeholder='Format'\n        key='format'\n        options={Object.keys(formatDictionary).map((key) => ({\n          value: key,\n          label: formatDictionary[key],\n        }))}\n        onChange={(val: any) => {\n          onChange({\n            ...parameters,\n            format: val.value,\n          });\n        }}\n        className='card-modal-select'\n      />\n      <div className='card-modal-boolean'>\n        <FBCheckbox\n          onChangeValue={() => {\n            onChange({\n              ...parameters,\n              'ui:autofocus': parameters['ui:autofocus']\n                ? parameters['ui:autofocus'] !== true\n                : true,\n            });\n          }}\n          isChecked={\n            parameters['ui:autofocus']\n              ? parameters['ui:autofocus'] === true\n              : false\n          }\n          label='Auto Focus'\n        />\n      </div>\n    </div>\n  );\n}\n\nfunction LongAnswer({\n  parameters,\n  onChange,\n}: {\n  parameters: Parameters,\n  onChange: (newParams: Parameters) => void,\n}) {\n  return (\n    <React.Fragment>\n      <h5>Default input</h5>\n      <Input\n        value={parameters.default}\n        placeholder='Default'\n        type='textarea'\n        onChange={(ev: SyntheticInputEvent<HTMLInputElement>) =>\n          onChange({ ...parameters, default: ev.target.value })\n        }\n        className='card-textarea'\n      />\n    </React.Fragment>\n  );\n}\n\nconst longAnswerInput = {\n  longAnswer: {\n    displayName: 'Long Answer',\n    matchIf: [\n      {\n        types: ['string'],\n        widget: 'textarea',\n      },\n    ],\n    defaultDataSchema: {},\n    defaultUiSchema: {\n      'ui:widget': 'textarea',\n    },\n    type: 'string',\n    cardBody: LongAnswer,\n    modalBody: CardLongAnswerParameterInputs,\n  },\n};\n\nexport default longAnswerInput;\n","// @flow\n\nimport React, { useState } from 'react';\nimport { Input } from 'reactstrap';\nimport FBCheckbox from '../checkbox/FBCheckbox';\nimport Tooltip from '../Tooltip';\nimport { getRandomId } from '../utils';\nimport type { Parameters } from '../types';\n\n// specify the inputs required for a number type object\nfunction CardNumberParameterInputs({\n  parameters,\n  onChange,\n}: {\n  parameters: Parameters,\n  onChange: (newParams: Parameters) => void,\n}) {\n  const [elementId] = useState(getRandomId());\n  return (\n    <div>\n      <h4>\n        Multiple of{' '}\n        <Tooltip\n          id={`${elementId}_multiple`}\n          type='help'\n          text='Require number to be a multiple of this number'\n        />\n      </h4>\n      <Input\n        value={parameters.multipleOf ? parameters.multipleOf : ''}\n        placeholder='ex: 2'\n        key='multipleOf'\n        type='number'\n        onChange={(ev: SyntheticInputEvent<HTMLInputElement>) => {\n          let newVal = parseFloat(ev.target.value);\n          if (Number.isNaN(newVal)) newVal = null;\n          onChange({\n            ...parameters,\n            multipleOf: newVal,\n          });\n        }}\n        className='card-modal-number'\n      />\n      <h4>Minimum</h4>\n      <Input\n        value={parameters.minimum || parameters.exclusiveMinimum || ''}\n        placeholder='ex: 3'\n        key='minimum'\n        type='number'\n        onChange={(ev: SyntheticInputEvent<HTMLInputElement>) => {\n          let newVal = parseFloat(ev.target.value);\n          if (Number.isNaN(newVal)) newVal = null;\n          // change either min or exclusiveMin depending on which one is active\n          if (parameters.exclusiveMinimum) {\n            onChange({\n              ...parameters,\n              exclusiveMinimum: newVal,\n              minimum: null,\n            });\n          } else {\n            onChange({\n              ...parameters,\n              minimum: newVal,\n              exclusiveMinimum: null,\n            });\n          }\n        }}\n        className='card-modal-number'\n      />\n      <div className='card-modal-boolean'>\n        <FBCheckbox\n          key='exclusiveMinimum'\n          onChangeValue={() => {\n            const newMin = parameters.minimum || parameters.exclusiveMinimum;\n            if (parameters.exclusiveMinimum) {\n              onChange({\n                ...parameters,\n                exclusiveMinimum: null,\n                minimum: newMin,\n              });\n            } else {\n              onChange({\n                ...parameters,\n                exclusiveMinimum: newMin,\n                minimum: null,\n              });\n            }\n          }}\n          isChecked={!!parameters.exclusiveMinimum}\n          disabled={!parameters.minimum && !parameters.exclusiveMinimum}\n          label='Exclusive Minimum'\n        />\n      </div>\n      <h4>Maximum</h4>\n      <Input\n        value={parameters.maximum || parameters.exclusiveMaximum || ''}\n        placeholder='ex: 8'\n        key='maximum'\n        type='number'\n        onChange={(ev: SyntheticInputEvent<HTMLInputElement>) => {\n          let newVal = parseFloat(ev.target.value);\n          if (Number.isNaN(newVal)) newVal = null;\n          // change either max or exclusiveMax depending on which one is active\n          if (parameters.exclusiveMinimum) {\n            onChange({\n              ...parameters,\n              exclusiveMaximum: newVal,\n              maximum: null,\n            });\n          } else {\n            onChange({\n              ...parameters,\n              maximum: newVal,\n              exclusiveMaximum: null,\n            });\n          }\n        }}\n        className='card-modal-number'\n      />\n      <div className='card-modal-boolean'>\n        <FBCheckbox\n          key='exclusiveMaximum'\n          onChangeValue={() => {\n            const newMax = parameters.maximum || parameters.exclusiveMaximum;\n            if (parameters.exclusiveMaximum) {\n              onChange({\n                ...parameters,\n                exclusiveMaximum: null,\n                maximum: newMax,\n              });\n            } else {\n              onChange({\n                ...parameters,\n                exclusiveMaximum: newMax,\n                maximum: null,\n              });\n            }\n          }}\n          isChecked={!!parameters.exclusiveMaximum}\n          disabled={!parameters.maximum && !parameters.exclusiveMaximum}\n          label='Exclusive Maximum'\n        />\n      </div>\n    </div>\n  );\n}\n\nfunction NumberField({\n  parameters,\n  onChange,\n}: {\n  parameters: Parameters,\n  onChange: (newParams: Parameters) => void,\n}) {\n  return (\n    <React.Fragment>\n      <h5>Default number</h5>\n      <Input\n        value={parameters.default}\n        placeholder='Default'\n        type='number'\n        onChange={(ev: SyntheticInputEvent<HTMLInputElement>) =>\n          onChange({\n            ...parameters,\n            default: parseFloat(ev.target.value),\n          })\n        }\n        className='card-number'\n      />\n    </React.Fragment>\n  );\n}\n\nconst numberInputs = {\n  integer: {\n    displayName: 'Integer',\n    matchIf: [\n      {\n        types: ['integer'],\n      },\n      {\n        types: ['integer'],\n        widget: 'number',\n      },\n    ],\n    defaultDataSchema: {},\n    defaultUiSchema: {},\n    type: 'integer',\n    cardBody: NumberField,\n    modalBody: CardNumberParameterInputs,\n  },\n  number: {\n    displayName: 'Number',\n    matchIf: [\n      {\n        types: ['number'],\n      },\n    ],\n    defaultDataSchema: {},\n    defaultUiSchema: {},\n    type: 'number',\n    cardBody: NumberField,\n    modalBody: CardNumberParameterInputs,\n  },\n};\n\nexport default numberInputs;\n","// @flow\n\nimport React, { useState } from 'react';\nimport { Input } from 'reactstrap';\nimport {\n  generateElementComponentsFromSchemas,\n  generateCategoryHash,\n} from '../utils';\nimport Card from '../Card';\nimport Section from '../Section';\nimport FBCheckbox from '../checkbox/FBCheckbox';\nimport shortAnswerInputs from './shortAnswerInputs';\nimport longAnswerInputs from './longAnswerInputs';\nimport numberInputs from './numberInputs';\nimport defaultInputs from './defaultInputs';\nimport { getRandomId } from '../utils';\nimport type { Parameters, Mods, FormInput } from '../types';\n\n// specify the inputs required for a string type object\nfunction CardArrayParameterInputs({\n  parameters,\n  onChange,\n}: {\n  parameters: Parameters,\n  onChange: ({ [string]: any }) => void,\n}) {\n  return (\n    <div>\n      <h4>Minimum Items</h4>\n      <Input\n        value={parameters.minItems || ''}\n        placeholder='ex: 2'\n        key='minimum'\n        type='number'\n        onChange={(ev: SyntheticInputEvent<HTMLInputElement>) => {\n          onChange({\n            ...parameters,\n            minItems: parseInt(ev.target.value, 10),\n          });\n        }}\n        className='card-modal-number'\n      />\n      <h4>Maximum Items</h4>\n      <Input\n        value={parameters.maxItems || ''}\n        placeholder='ex: 2'\n        key='maximum'\n        type='number'\n        onChange={(ev: SyntheticInputEvent<HTMLInputElement>) => {\n          onChange({\n            ...parameters,\n            maxItems: parseInt(ev.target.value, 10),\n          });\n        }}\n        className='card-modal-number'\n      />\n    </div>\n  );\n}\n\nfunction getInnerCardComponent({\n  defaultFormInputs,\n}: {\n  defaultFormInputs: { [string]: FormInput },\n}) {\n  return function InnerCard({\n    parameters,\n    onChange,\n    mods,\n  }: {\n    parameters: Parameters,\n    onChange: (newParams: Parameters) => void,\n    mods?: Mods,\n  }) {\n    const [elementId] = useState(getRandomId);\n    const newDataProps = {};\n    const newUiProps = {};\n    const allFormInputs = {\n      ...defaultFormInputs,\n      ...(mods && mods.customFormInputs),\n    };\n    // parse components into data and ui relevant pieces\n    Object.keys(parameters).forEach((propName) => {\n      if (propName.startsWith('ui:*')) {\n        newUiProps[propName.substring(4)] = parameters[propName];\n      } else if (propName.startsWith('ui:')) {\n        newUiProps[propName] = parameters[propName];\n      } else if (!['name', 'required'].includes(propName)) {\n        newDataProps[propName] = parameters[propName];\n      }\n    });\n\n    const definitionData = parameters.definitionData\n      ? parameters.definitionData\n      : {};\n    const definitionUi = parameters.definitionUi ? parameters.definitionUi : {};\n    const [cardOpen, setCardOpen] = React.useState(false);\n    if (parameters.type !== 'array') {\n      return <h4>Not an array </h4>;\n    }\n    return (\n      <div className='card-array'>\n        <FBCheckbox\n          onChangeValue={() => {\n            if (newDataProps.items.type === 'object') {\n              onChange({\n                ...parameters,\n                items: {\n                  ...newDataProps.items,\n                  type: 'string',\n                },\n              });\n            } else {\n              onChange({\n                ...parameters,\n                items: {\n                  ...newDataProps.items,\n                  type: 'object',\n                },\n              });\n            }\n          }}\n          isChecked={newDataProps.items.type === 'object'}\n          label='Section'\n          id={`${elementId}_issection`}\n        />\n        {generateElementComponentsFromSchemas({\n          schemaData: { properties: { item: newDataProps.items } },\n          uiSchemaData: { item: newUiProps.items },\n          onChange: (schema, uischema) => {\n            onChange({\n              ...parameters,\n              items: schema.properties.item,\n              'ui:*items': uischema.item || {},\n            });\n          },\n          path: elementId,\n          definitionData,\n          definitionUi,\n          hideKey: true,\n          cardOpenArray: [cardOpen],\n          setCardOpenArray: (newArr) => setCardOpen(newArr[0]),\n          allFormInputs,\n          mods,\n          categoryHash: generateCategoryHash(allFormInputs),\n          Card: (props) => <Card {...props} showObjectNameInput={false} />,\n          Section,\n        })}\n      </div>\n    );\n  };\n}\n\nconst defaultFormInputs = ({\n  ...defaultInputs,\n  ...shortAnswerInputs,\n  ...longAnswerInputs,\n  ...numberInputs,\n}: { [string]: FormInput });\ndefaultFormInputs.array = {\n  displayName: 'Array',\n  matchIf: [\n    {\n      types: ['array'],\n    },\n  ],\n  defaultDataSchema: {\n    items: { type: 'string' },\n  },\n  defaultUiSchema: {},\n  type: 'array',\n  cardBody: getInnerCardComponent({ defaultFormInputs }),\n  modalBody: CardArrayParameterInputs,\n};\n\nconst ArrayInputs = {\n  array: {\n    displayName: 'Array',\n    matchIf: [\n      {\n        types: ['array'],\n      },\n    ],\n    defaultDataSchema: {\n      items: { type: 'string' },\n    },\n    defaultUiSchema: {},\n    type: 'array',\n    cardBody: getInnerCardComponent({ defaultFormInputs }),\n    modalBody: CardArrayParameterInputs,\n  },\n};\n\nexport default ArrayInputs;\n","// @flow\nimport shortAnswerInputs from './shortAnswerInputs';\nimport longAnswerInputs from './longAnswerInputs';\nimport numberInputs from './numberInputs';\nimport arrayInputs from './arrayInputs';\nimport defaultInputs from './defaultInputs';\nimport type { FormInput } from '../types';\n\nconst DEFAULT_FORM_INPUTS = ({\n  ...defaultInputs,\n  ...shortAnswerInputs,\n  ...longAnswerInputs,\n  ...numberInputs,\n  ...arrayInputs,\n}: { [string]: FormInput });\n\nexport default DEFAULT_FORM_INPUTS;\n","// @flow\nimport * as React from 'react';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport { Alert, Input } from 'reactstrap';\nimport { createUseStyles } from 'react-jss';\nimport Card from './Card';\nimport Section from './Section';\nimport Add from './Add';\nimport { arrows as arrowsStyle } from './styles';\nimport {\n  parse,\n  stringify,\n  checkForUnsupportedFeatures,\n  generateElementComponentsFromSchemas,\n  addCardObj,\n  addSectionObj,\n  onDragEnd,\n  countElementsFromSchema,\n  generateCategoryHash,\n  excludeKeys,\n} from './utils';\nimport DEFAULT_FORM_INPUTS from './defaults/defaultFormInputs';\nimport type { Mods } from './types';\n\nconst useStyles = createUseStyles({\n  formBuilder: {\n    'text-align': 'center',\n    '& .fa': {\n      cursor: 'pointer',\n    },\n    '& .fa-question-circle': {\n      color: 'gray',\n    },\n    '& .fa-asterisk': {\n      'font-size': '.9em',\n      color: 'green',\n    },\n    '& .fa-plus-square': {\n      color: 'green',\n      'font-size': '1.5em',\n      margin: '0 auto',\n    },\n    ...arrowsStyle,\n    '& .card-container': {\n      '&:hover': {\n        border: '1px solid green',\n      },\n      display: 'block',\n      width: '70%',\n      'min-width': '400px',\n      margin: '2em auto',\n      border: '1px solid gray',\n      'border-radius': '4px',\n      'background-color': 'white',\n      '& h4': {\n        width: '100%',\n        'text-align': 'left',\n        display: 'inline-block',\n        color: '#138AC2',\n        margin: '0.25em .5em 0 .5em',\n        'font-size': '18px',\n      },\n      '& .d-flex': {\n        'border-bottom': '1px solid gray',\n      },\n      '& .label': {\n        float: 'left',\n      },\n    },\n    '& .card-dependent': {\n      border: '1px dashed gray',\n    },\n    '& .card-requirements': {\n      border: '1px dashed black',\n    },\n    '& .section-container': {\n      '&:hover': {\n        border: '1px solid green',\n      },\n      display: 'block',\n      width: '90%',\n      'min-width': '400px',\n      margin: '2em auto',\n      border: '1px solid var(--gray)',\n      'border-radius': '4px',\n      'background-color': 'white',\n      '& h4': {\n        width: '100%',\n        'text-align': 'left',\n        display: 'inline-block',\n        color: '#138AC2',\n        margin: '0.25em .5em 0 .5em',\n        'font-size': '18px',\n      },\n      '& .d-flex': {\n        'border-bottom': '1px solid var(--gray)',\n      },\n      '& .label': {\n        float: 'left',\n      },\n    },\n    '& .section-dependent': {\n      border: '1px dashed gray',\n    },\n    '& .section-requirements': {\n      border: '1px dashed black',\n    },\n    '& .alert': {\n      textAlign: 'left',\n      width: '70%',\n      margin: '1em auto',\n      '& h5': {\n        color: 'black',\n        fontSize: '16px',\n        fontWeight: 'bold',\n        margin: '0',\n      },\n      '& .fa': { fontSize: '14px' },\n    },\n    '& .disabled-unchecked-checkbox': {\n      color: 'var(--gray)',\n      '& div::before': { backgroundColor: 'var(--light-gray)' },\n    },\n    '& .disabled-input': {\n      '& input': { backgroundColor: 'var(--light-gray)' },\n      '& input:focus': {\n        backgroundColor: 'var(--light-gray)',\n        border: '1px solid var(--gray)',\n      },\n    },\n  },\n  formHead: {\n    display: 'block',\n    margin: '0 auto',\n    'background-color': '#EBEBEB',\n    border: '1px solid #858F96',\n    'border-radius': '4px',\n    width: '70%',\n    padding: '10px',\n    '& div': {\n      width: '30%',\n      display: 'inline-block',\n      'text-align': 'left',\n      padding: '10px',\n    },\n    '& .form-title': {\n      'text-align': 'left',\n    },\n    '& .form-description': {\n      'text-align': 'left',\n    },\n    '& h5': {\n      'font-size': '14px',\n      'line-height': '21px',\n      'font-weight': 'bold',\n    },\n  },\n  formBody: {\n    display: 'flex',\n    flexDirection: 'column',\n    '& .fa-pencil-alt': {\n      border: '1px solid #1d71ad',\n      color: '#1d71ad',\n    },\n    '& .modal-body': {\n      maxHeight: '500px',\n      overflowY: 'scroll',\n    },\n    '& .card-container': {\n      width: '70%',\n      minWidth: '400px',\n      margin: '2em auto',\n      border: '1px solid var(--gray)',\n      borderRadius: '4px',\n      backgroundColor: 'white',\n      '& h4': {\n        width: '100%',\n        textAlign: ['left', 'left'],\n        display: 'inline-block',\n        color: '#138ac2',\n        margin: '0.25em 0.5em 0 0.5em',\n        fontSize: '18px',\n      },\n      '& .d-flex': { borderBottom: '1px solid var(--gray)' },\n      '& .label': { cssFloat: 'left' },\n    },\n    '& .card-container:hover': { border: '1px solid var(--green)' },\n    '& .card-dependent': { border: '1px dashed var(--gray)' },\n    '& .card-add': {\n      cursor: 'pointer',\n      display: 'block',\n      color: '$green',\n      fontSize: '1.5em',\n    },\n    '& .section-container': {\n      width: '90%',\n      minWidth: '400px',\n      margin: '2em auto',\n      border: '1px solid var(--gray)',\n      borderRadius: '4px',\n      '& h4': {\n        width: '100%',\n        textAlign: ['left', 'left'],\n        display: 'inline-block',\n        color: '#138ac2',\n        margin: '0.25em 0.5em 0 0.5em',\n        fontSize: '18px',\n      },\n      '& .d-flex': { borderBottom: '1px solid var(--gray)' },\n      '& .label': { cssFloat: 'left' },\n    },\n    '& .section-container:hover': { border: '1px solid var(--green)' },\n    '& .section-dependent': { border: '1px dashed var(--gray)' },\n    '& .section-requirements': { border: '1px dashed black' },\n  },\n  formFooter: {\n    marginTop: '1em',\n    textAlign: 'center',\n    '& .fa': { cursor: 'pointer', color: '$green', fontSize: '1.5em' },\n  },\n});\n\nexport default function FormBuilder({\n  schema,\n  uischema,\n  onChange,\n  mods,\n  className,\n}: {\n  schema: string,\n  uischema: string,\n  onChange: (string, string) => any,\n  mods?: Mods,\n  className?: string,\n}) {\n  const classes = useStyles();\n  const schemaData = (parse(schema): { [string]: any }) || {};\n  schemaData.type = 'object';\n  const uiSchemaData = (parse(uischema): { [string]: any }) || {};\n  const allFormInputs = excludeKeys(\n    {\n      ...DEFAULT_FORM_INPUTS,\n      ...(mods && mods.customFormInputs),\n    },\n    mods && mods.deactivatedFormInputs,\n  );\n\n  const unsupportedFeatures = checkForUnsupportedFeatures(\n    schemaData,\n    uiSchemaData,\n    allFormInputs,\n  );\n\n  const elementNum = countElementsFromSchema(schemaData);\n  const defaultCollapseStates = [...Array(elementNum)].map(() => false);\n  const [cardOpenArray, setCardOpenArray] = React.useState(\n    defaultCollapseStates,\n  );\n  const categoryHash = generateCategoryHash(allFormInputs);\n\n  return (\n    <div className={`${classes.formBuilder} ${className || ''}`}>\n      <Alert\n        style={{\n          display: unsupportedFeatures.length === 0 ? 'none' : 'block',\n        }}\n        color='warning'\n      >\n        <h5>Unsupported Features:</h5>\n        {unsupportedFeatures.map((message, index) => (\n          <li key={index}>{message}</li>\n        ))}\n      </Alert>\n      {(!mods || mods.showFormHead !== false) && (\n        <div className={classes.formHead} data-test='form-head'>\n          <div>\n            <h5 data-test='form-name-label'>\n              {mods &&\n              mods.labels &&\n              typeof mods.labels.formNameLabel === 'string'\n                ? mods.labels.formNameLabel\n                : 'Form Name'}\n            </h5>\n            <Input\n              value={schemaData.title || ''}\n              placeholder='Title'\n              type='text'\n              onChange={(ev: SyntheticInputEvent<HTMLInputElement>) => {\n                onChange(\n                  stringify({\n                    ...schemaData,\n                    title: ev.target.value,\n                  }),\n                  uischema,\n                );\n              }}\n              className='form-title'\n            />\n          </div>\n          <div>\n            <h5 data-test='form-description-label'>\n              {mods &&\n              mods.labels &&\n              typeof mods.labels.formDescriptionLabel === 'string'\n                ? mods.labels.formDescriptionLabel\n                : 'Form Description'}\n            </h5>\n            <Input\n              value={schemaData.description || ''}\n              placeholder='Description'\n              type='text'\n              onChange={(ev: SyntheticInputEvent<HTMLInputElement>) =>\n                onChange(\n                  stringify({\n                    ...schemaData,\n                    description: ev.target.value,\n                  }),\n                  uischema,\n                )\n              }\n              className='form-description'\n            />\n          </div>\n        </div>\n      )}\n      <div className={`form-body ${classes.formBody}`}>\n        <DragDropContext\n          onDragEnd={(result) =>\n            onDragEnd(result, {\n              schema: schemaData,\n              uischema: uiSchemaData,\n              onChange: (newSchema, newUiSchema) =>\n                onChange(stringify(newSchema), stringify(newUiSchema)),\n              definitionData: schemaData.definitions,\n              definitionUi: uiSchemaData.definitions,\n              categoryHash,\n            })\n          }\n          className='form-body'\n        >\n          <Droppable droppableId='droppable'>\n            {(providedDroppable) => (\n              <div\n                ref={providedDroppable.innerRef}\n                {...providedDroppable.droppableProps}\n              >\n                {generateElementComponentsFromSchemas({\n                  schemaData,\n                  uiSchemaData,\n                  onChange: (newSchema, newUiSchema) =>\n                    onChange(stringify(newSchema), stringify(newUiSchema)),\n                  definitionData: schemaData.definitions,\n                  definitionUi: uiSchemaData.definitions,\n                  path: 'root',\n                  cardOpenArray,\n                  setCardOpenArray,\n                  allFormInputs,\n                  mods,\n                  categoryHash,\n                  Card,\n                  Section,\n                }).map((element: any, index) => (\n                  <Draggable\n                    key={element.key}\n                    draggableId={element.key}\n                    index={index}\n                  >\n                    {(providedDraggable) => (\n                      <div\n                        ref={providedDraggable.innerRef}\n                        {...providedDraggable.draggableProps}\n                        {...providedDraggable.dragHandleProps}\n                      >\n                        {element}\n                      </div>\n                    )}\n                  </Draggable>\n                ))}\n                {providedDroppable.placeholder}\n              </div>\n            )}\n          </Droppable>\n        </DragDropContext>\n      </div>\n      <div className={`form-footer ${classes.formFooter}`}>\n        <Add\n          addElem={(choice: string) => {\n            if (choice === 'card') {\n              addCardObj({\n                schema: schemaData,\n                uischema: uiSchemaData,\n                mods: mods,\n                onChange: (newSchema, newUiSchema) =>\n                  onChange(stringify(newSchema), stringify(newUiSchema)),\n                definitionData: schemaData.definitions,\n                definitionUi: uiSchemaData.definitions,\n                categoryHash,\n              });\n            } else if (choice === 'section') {\n              addSectionObj({\n                schema: schemaData,\n                uischema: uiSchemaData,\n                onChange: (newSchema, newUiSchema) =>\n                  onChange(stringify(newSchema), stringify(newUiSchema)),\n                definitionData: schemaData.definitions,\n                definitionUi: uiSchemaData.definitions,\n                categoryHash,\n              });\n            }\n          }}\n          hidden={\n            schemaData.properties &&\n            Object.keys(schemaData.properties).length !== 0\n          }\n        />\n      </div>\n    </div>\n  );\n}\n","// @flow\n\nimport React from 'react';\nimport {\n  generateElementComponentsFromSchemas,\n  countElementsFromSchema,\n  addCardObj,\n  addSectionObj,\n} from './utils';\nimport Card from './Card';\nimport Section from './Section';\nimport Add from './Add';\nimport DEFAULT_FORM_INPUTS from './defaults/defaultFormInputs';\nimport type { Mods } from './types';\n\nexport default function CardGallery({\n  definitionSchema,\n  definitionUiSchema,\n  onChange,\n  mods,\n  categoryHash,\n}: {\n  definitionSchema: { [string]: any },\n  definitionUiSchema: { [string]: any },\n  onChange: ({ [string]: any }, { [string]: any }) => void,\n  mods?: Mods,\n  categoryHash: { [string]: string },\n}) {\n  const elementNum = countElementsFromSchema({\n    properties: definitionSchema,\n  });\n  const defaultCollapseStates = [...Array(elementNum)].map(() => false);\n  const [cardOpenArray, setCardOpenArray] = React.useState(\n    defaultCollapseStates,\n  );\n  const allFormInputs = {\n    ...DEFAULT_FORM_INPUTS,\n    ...(mods && mods.customFormInputs),\n  };\n  const componentArr = generateElementComponentsFromSchemas({\n    schemaData: { properties: definitionSchema },\n    uiSchemaData: definitionUiSchema,\n    onChange: (newDefinitions, newDefinitionUis) => {\n      const oldUi = newDefinitionUis;\n      const newUi = {};\n\n      Object.keys(oldUi).forEach((definedUi) => {\n        if (!['definitions', 'ui:order'].includes(definedUi))\n          newUi[definedUi] = oldUi[definedUi];\n      });\n      onChange(newDefinitions.properties, newUi);\n    },\n    path: 'definitions',\n    definitionData: definitionSchema,\n    definitionUi: definitionUiSchema,\n    cardOpenArray,\n    setCardOpenArray,\n    allFormInputs,\n    mods,\n    categoryHash,\n    Card,\n    Section,\n  }).map((element: any) => (\n    <div\n      key={typeof element.key === 'string' ? element.key : ''}\n      className='form_gallery_container'\n    >\n      {element}\n    </div>\n  ));\n\n  return (\n    <div className='form_gallery'>\n      {componentArr}\n      {componentArr.length === 0 && <h5>No components in \"definitions\"</h5>}\n      <div className='form_footer'>\n        <Add\n          addElem={(choice: string) => {\n            if (choice === 'card') {\n              addCardObj({\n                schema: { properties: definitionSchema },\n                uischema: definitionUiSchema,\n                mods: mods,\n                onChange: (newDefinitions, newDefinitionUis) => {\n                  const oldUi = newDefinitionUis;\n                  const newUi = {};\n\n                  Object.keys(oldUi).forEach((definedUiSchemaKey) => {\n                    if (\n                      !['definitions', 'ui:order'].includes(definedUiSchemaKey)\n                    )\n                      newUi[definedUiSchemaKey] = oldUi[definedUiSchemaKey];\n                  });\n                  onChange(newDefinitions.properties, newUi);\n                },\n                definitionData: definitionSchema,\n                definitionUi: definitionUiSchema,\n                categoryHash,\n              });\n            } else if (choice === 'section') {\n              addSectionObj({\n                schema: { properties: definitionSchema },\n                uischema: definitionUiSchema,\n                onChange: (newDefinitions, newDefinitionUis) => {\n                  const oldUi = newDefinitionUis;\n                  const newUi = {};\n\n                  Object.keys(oldUi).forEach((definedUiSchemaKey) => {\n                    if (\n                      !['definitions', 'ui:order'].includes(definedUiSchemaKey)\n                    )\n                      newUi[definedUiSchemaKey] = oldUi[definedUiSchemaKey];\n                  });\n                  onChange(newDefinitions.properties, newUi);\n                },\n                definitionData: definitionSchema,\n                definitionUi: definitionUiSchema,\n                categoryHash,\n              });\n            }\n          }}\n          hidden={\n            !!definitionSchema && Object.keys(definitionSchema).length !== 0\n          }\n        />\n      </div>\n    </div>\n  );\n}\n","// @flow\nimport * as React from 'react';\nimport { createUseStyles } from 'react-jss';\nimport CardGallery from './CardGallery';\nimport {\n  parse,\n  stringify,\n  propagateDefinitionChanges,\n  generateCategoryHash,\n  excludeKeys,\n} from './utils';\nimport { arrows as arrowsStyle } from './styles';\nimport DEFAULT_FORM_INPUTS from './defaults/defaultFormInputs';\nimport type { Mods } from './types';\n\nconst useStyles = createUseStyles({\n  preDefinedGallery: {\n    display: 'flex',\n    flexDirection: 'column',\n    'text-align': 'center',\n    '& .fa': {\n      cursor: 'pointer',\n    },\n    '& .fa-question-circle': {\n      color: 'gray',\n    },\n    '& .fa-asterisk': {\n      'font-size': '.9em',\n      color: 'green',\n    },\n    ...arrowsStyle,\n    '& .form_footer': {\n      marginTop: '1em',\n      textAlign: 'center',\n      '& .fa': { cursor: 'pointer', color: '$green', fontSize: '1.5em' },\n    },\n    '& .fa-plus-square': {\n      color: 'green',\n      'font-size': '1.5em',\n      margin: '0 auto',\n    },\n    '& .card-container': {\n      '&:hover': {\n        border: '1px solid green',\n      },\n      width: '70%',\n      'min-width': '400px',\n      margin: '2em auto',\n      border: '1px solid gray',\n      'border-radius': '4px',\n      'background-color': 'white',\n      '& h4': {\n        width: '100%',\n        'text-align': 'left',\n        display: 'inline-block',\n        color: '#138AC2',\n        margin: '0.25em .5em 0 .5em',\n        'font-size': '18px',\n      },\n      '& .d-flex': {\n        'border-bottom': '1px solid gray',\n      },\n      '& .label': {\n        float: 'left',\n      },\n    },\n    '& .card-requirements': {\n      border: '1px dashed black',\n    },\n    '& .section-container': {\n      '&:hover': {\n        border: '1px solid green',\n      },\n      display: 'block',\n      width: '90%',\n      'min-width': '400px',\n      margin: '2em auto',\n      border: '1px solid var(--gray)',\n      'border-radius': '4px',\n      'background-color': 'white',\n      '& h4': {\n        width: '100%',\n        'text-align': 'left',\n        display: 'inline-block',\n        color: '#138AC2',\n        margin: '0.25em .5em 0 .5em',\n        'font-size': '18px',\n      },\n      '& .d-flex': {\n        'border-bottom': '1px solid var(--gray)',\n      },\n      '& .label': {\n        float: 'left',\n      },\n    },\n    '& .section-dependent': {\n      border: '1px dashed gray',\n    },\n    '& .section-requirements': {\n      border: '1px dashed black',\n    },\n    '& .fa-pencil-alt': {\n      border: '1px solid #1d71ad',\n      color: '#1d71ad',\n    },\n    '& .modal-body': {\n      maxHeight: '500px',\n      overflowY: 'scroll',\n    },\n    '& .card-container:hover': { border: '1px solid var(--green)' },\n    '& .card-dependent': { border: '1px dashed var(--gray)' },\n    '& .card-add': {\n      cursor: 'pointer',\n      display: 'block',\n      color: '$green',\n      fontSize: '1.5em',\n    },\n\n    '& .section-container:hover': { border: '1px solid var(--green)' },\n  },\n});\n\nexport default function PredefinedGallery({\n  schema,\n  uischema,\n  onChange,\n  mods,\n}: {\n  schema: string,\n  uischema: string,\n  onChange: (string, string) => any,\n  mods?: Mods,\n}) {\n  const classes = useStyles();\n  const schemaData = (parse(schema): { [string]: any }) || {};\n  const uiSchemaData = (parse(uischema): { [string]: any }) || {};\n  const allFormInputs = excludeKeys(\n    {\n      ...DEFAULT_FORM_INPUTS,\n      ...(mods && mods.customFormInputs),\n    },\n    mods && mods.deactivatedFormInputs,\n  );\n  const categoryHash = generateCategoryHash(allFormInputs);\n\n  React.useEffect(() => {\n    if (!uiSchemaData.definitions) {\n      // eslint-disable-next-line no-console\n      console.log('Parsing UI schema to assign UI for definitions');\n      // need to create definitions from scratch\n      const references = [];\n      // recursively search for all $refs in the schemaData\n      const findRefs = (name, schemaObject) => {\n        if (!schemaObject) return;\n        if (typeof schemaObject === 'object')\n          Object.keys(schemaObject).forEach((key) => {\n            if (typeof key === 'string') {\n              if (key === '$ref') references.push(name);\n              findRefs(key, schemaObject[key]);\n            }\n          });\n        if (Array.isArray(schemaObject))\n          schemaObject.forEach((innerObj) => {\n            findRefs(name, innerObj);\n          });\n      };\n\n      findRefs('root', schemaData);\n\n      uiSchemaData.definitions = {};\n      const referenceSet = new Set(references);\n      Object.keys(uiSchemaData).forEach((uiProp) => {\n        if (referenceSet.has(uiProp))\n          uiSchemaData.definitions[uiProp] = uiSchemaData[uiProp];\n      });\n      if (!Object.keys(uiSchemaData.definitions).length) {\n        uiSchemaData.definitions = undefined;\n      }\n      onChange(stringify(schemaData), stringify(uiSchemaData));\n    }\n  }, [uischema, schema]);\n  return (\n    <div className={classes.preDefinedGallery}>\n      <CardGallery\n        definitionSchema={schemaData.definitions}\n        definitionUiSchema={uiSchemaData.definitions}\n        onChange={(\n          newDefinitions: { [string]: any },\n          newDefinitionsUi: { [string]: any },\n        ) => {\n          schemaData.definitions = newDefinitions;\n          uiSchemaData.definitions = newDefinitionsUi;\n          // propagate changes in ui definitions to all relavant parties in main schema\n\n          propagateDefinitionChanges(\n            schemaData,\n            uiSchemaData,\n            (newSchema, newUiSchema) =>\n              onChange(stringify(newSchema), stringify(newUiSchema)),\n            categoryHash,\n          );\n        }}\n        mods={mods}\n        categoryHash={categoryHash}\n      />\n    </div>\n  );\n}\n","// @flow\n\nimport * as React from 'react';\n\nimport classnames from 'classnames';\nimport { TabContent, TabPane, Nav, NavItem, NavLink } from 'reactstrap';\nimport { createUseStyles } from 'react-jss';\n\ntype TabSpec = {\n  name: string,\n  content: React.Element<any>,\n  id?: string,\n};\n\nconst useStyles = createUseStyles({\n  portalTabs: {\n    '& .tab-content': {\n      '& .tab-pane > .tab-pane': {\n        display: 'none',\n        padding: '2em',\n      },\n      '& .active > .tab-pane': {\n        display: 'block',\n      },\n    },\n    '& .nav': {\n      '& .nav-link': {\n        position: 'relative',\n        display: 'inline-flex',\n        padding: '10px',\n      },\n      '& li': {\n        display: 'inline-block',\n      },\n      '& .nav-item': {\n        '& .active': {\n          color: '#212529 !important',\n          'font-weight': 600,\n        },\n        '&:hover': {\n          cursor: 'pointer',\n        },\n        '& a': {\n          color: '#ccc',\n        },\n      },\n    },\n  },\n});\n\ntype Props = {\n  defaultActiveTab?: number,\n  tabs: TabSpec[],\n  withSeparator?: boolean,\n  preventRerender?: boolean,\n};\n\nexport default function Tabs({\n  defaultActiveTab = 0,\n  tabs = [],\n  withSeparator = false,\n  preventRerender = false,\n}: Props) {\n  const classes = useStyles();\n  const [activeTab, setActiveTab] = React.useState(defaultActiveTab);\n\n  return (\n    <div className={classes.portalTabs}>\n      <Nav tabs>\n        {tabs.map(({ name, id }, i) => (\n          <NavItem key={i} id={id}>\n            <NavLink\n              className={classnames({ active: activeTab === i })}\n              onClick={() => {\n                setActiveTab(i);\n              }}\n            >\n              {name}\n            </NavLink>\n          </NavItem>\n        ))}\n      </Nav>\n      <TabContent\n        activeTab={activeTab}\n        className={classnames({\n          'with-separator': withSeparator,\n        })}\n      >\n        <React.Fragment>\n          {tabs.map(({ content }, i) => (\n            <TabPane key={i} tabId={i}>\n              {activeTab === i && (preventRerender ? true : content)}\n              {preventRerender ? content : ''}\n            </TabPane>\n          ))}\n        </React.Fragment>\n      </TabContent>\n    </div>\n  );\n}\n","// @flow\n\nimport React from 'react';\n\ntype Props = {\n  children: any,\n  onErr?: (string) => any,\n  errMessage?: string,\n};\n\ntype State = {\n  hasError: boolean,\n  error: string,\n};\n\n/* \nContainer for potentially error generating components\nTriggers the optional onErr function with error message as string\nProvides the option to attempt rendering the children again\n*/\nclass ErrorBoundary extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = { hasError: false, error: '' };\n  }\n\n  componentDidCatch(error: any) {\n    this.setState({ hasError: true });\n    const errorMessage = error.toString();\n    this.setState({\n      error: errorMessage,\n    });\n    if (this.props.onErr) this.props.onErr(errorMessage);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div>\n          <p>\n            {this.props.errMessage ? this.props.errMessage : this.state.error}\n          </p>\n          <button\n            onClick={() => {\n              this.setState({ hasError: false, error: '' });\n              if (this.props.onErr) this.props.onErr('');\n            }}\n          >\n            Try Again\n          </button>\n        </div>\n      );\n    } else {\n      return this.props.children;\n    }\n  }\n}\n\nexport default ErrorBoundary;\n","// @flow\nimport React from 'react';\nimport {\n  Alert,\n  Modal,\n  ModalHeader,\n  Button,\n  ModalBody,\n  ModalFooter,\n} from 'reactstrap';\nimport { withTheme } from '@rjsf/core';\nimport { Theme as Bootstrap4Theme } from '@rjsf/bootstrap-4';\nimport {\n  FormBuilder,\n  PredefinedGallery,\n} from '@ginkgo-bioworks/react-json-schema-form-builder';\nimport Tabs from './tabs/Tabs';\nimport JSONInput from 'react-json-editor-ajrm';\nimport locale from 'react-json-editor-ajrm/locale/en';\nimport ErrorBoundary from './ErrorBoundary';\n\nconst Form = withTheme(Bootstrap4Theme);\n\ntype Props = {\n  lang: string,\n  schema: string,\n  uischema: string,\n  onChange?: (schema: string, uischema: string) => void,\n  schemaTitle?: string,\n  uischemaTitle?: string,\n  width?: string,\n  height?: string,\n};\n\ntype State = {\n  formData: any,\n  formToggle: boolean,\n  outputToggle: boolean,\n  schemaFormErrorFlag: string,\n  validFormInput: boolean,\n  submissionData: any,\n};\n\n// return error message for parsing or blank if no error\nfunction checkError(text: string, language: string) {\n  let data;\n  try {\n    data = JSON.parse(text);\n  } catch (e) {\n    return e.toString();\n  }\n  if (typeof data === 'string') {\n    return 'Received a string instead of object.';\n  }\n  return '';\n}\n\nclass JsonSchemaFormEditor extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    // assign initial values\n    this.state = {\n      formData: {},\n      formToggle: true,\n      outputToggle: false,\n      schemaFormErrorFlag: '',\n      validFormInput: false,\n      editorWidth: 700,\n      submissionData: {},\n    };\n  }\n\n  // update state schema and indicate parsing errors\n  updateSchema(text: string) {\n    // update parent\n    if (this.props.onChange) this.props.onChange(text, this.props.uischema);\n  }\n\n  // update state ui schema and indicate parsing errors\n  updateUISchema(text: string) {\n    // update parent\n    if (this.props.onChange) this.props.onChange(this.props.schema, text);\n  }\n\n  // update the internal form data state\n  updateFormData(text: string) {\n    try {\n      const data = JSON.parse(text);\n      this.setState({\n        formData: data,\n        schemaFormErrorFlag: '',\n      });\n    } catch (err) {\n      this.setState({\n        schemaFormErrorFlag: err.toString(),\n      });\n    }\n  }\n\n  render() {\n    const schemaError = checkError(this.props.schema, this.props.lang);\n    const schemaUiError = checkError(this.props.uischema, this.props.lang);\n    return (\n      <div\n        style={{\n          width: this.props.width ? this.props.width : '100%',\n          height: this.props.height ? this.props.height : '500px',\n        }}\n        className='playground-main'\n      >\n        <Alert\n          style={{\n            display: schemaError === '' ? 'none' : 'block',\n          }}\n          color='danger'\n        >\n          <h5>Schema:</h5> {schemaError}\n        </Alert>\n        <Alert\n          style={{\n            display: schemaUiError === '' ? 'none' : 'block',\n          }}\n          color='danger'\n        >\n          <h5>UI Schema:</h5> {schemaUiError}\n        </Alert>\n        <Alert\n          style={{\n            display: this.state.schemaFormErrorFlag === '' ? 'none' : 'block',\n          }}\n          color='danger'\n        >\n          <h5>Form:</h5> {this.state.schemaFormErrorFlag}\n        </Alert>\n        <Tabs\n          tabs={[\n            {\n              name: 'Visual Form Builder',\n              id: 'form-builder',\n              content: (\n                <div\n                  className='tab-pane'\n                  style={{\n                    height: this.props.height ? this.props.height : '500px',\n                  }}\n                >\n                  <ErrorBoundary onErr={() => {}}>\n                    <FormBuilder\n                      schema={this.props.schema}\n                      uischema={this.props.uischema}\n                      mods={this.props.mods}\n                      onChange={(newSchema: string, newUiSchema: string) => {\n                        if (this.props.onChange)\n                          this.props.onChange(newSchema, newUiSchema);\n                      }}\n                    />\n                  </ErrorBoundary>\n                </div>\n              ),\n            },\n            {\n              name: 'Preview Form',\n              id: 'preview-form',\n              content: (\n                <div\n                  className='tab-pane'\n                  style={{\n                    height: this.props.height ? this.props.height : '500px',\n                  }}\n                >\n                  <ErrorBoundary\n                    onErr={(err: string) => {\n                      this.setState({\n                        schemaFormErrorFlag: err,\n                      });\n                    }}\n                    errMessage='Error parsing JSON Schema'\n                  >\n                    <Form\n                      schema={\n                        schemaError === '' ? JSON.parse(this.props.schema) : {}\n                      }\n                      uiSchema={\n                        schemaUiError === ''\n                          ? JSON.parse(this.props.uischema)\n                          : {}\n                      }\n                      onChange={(formData) =>\n                        this.updateFormData(JSON.stringify(formData.formData))\n                      }\n                      formData={this.state.formData}\n                      submitButtonMessage={'Submit'}\n                      onSubmit={(submissionData) => {\n                        // below only runs if validation succeeded\n                        this.setState({\n                          validFormInput: true,\n                          outputToggle: true,\n                          submissionData,\n                        });\n                      }}\n                    />\n                  </ErrorBoundary>\n                  <Modal isOpen={this.state.outputToggle}>\n                    <ModalHeader>Form output preview</ModalHeader>\n                    <ModalBody>\n                      <div className='editor-container'>\n                        <ErrorBoundary\n                          onErr={() => {}}\n                          errMessage={'Error parsing JSON Schema Form output'}\n                        >\n                          <h4>Output Data</h4>\n                          <JSONInput\n                            id='a_unique_id'\n                            placeholder={this.state.submissionData}\n                            locale={locale}\n                            height='550px'\n                          />\n                        </ErrorBoundary>\n                        <br />\n                      </div>\n                    </ModalBody>\n                    <ModalFooter>\n                      <Button\n                        onClick={() => {\n                          this.setState({\n                            outputToggle: false,\n                          });\n                        }}\n                        color='secondary'\n                      >\n                        Close\n                      </Button>\n                    </ModalFooter>\n                  </Modal>\n                </div>\n              ),\n            },\n            {\n              name: 'Edit Schema',\n              id: 'editors',\n              content: (\n                <div\n                  className='tab-pane'\n                  style={{\n                    height: this.props.height ? this.props.height : '500px',\n                    display: 'flex',\n                    flexDirection: 'row',\n                  }}\n                >\n                  <div\n                    style={{ margin: '1em', width: '50em' }}\n                    className='editor-container'\n                  >\n                    <ErrorBoundary\n                      onErr={(err: string) => {\n                        // if rendering initial value causes a crash\n                        // eslint-disable-next-line no-console\n                        console.error(err);\n                        this.updateSchema('{}');\n                      }}\n                      errMessage={'Error parsing JSON Schema input'}\n                    >\n                      <h4>Data Schema</h4>\n                      <JSONInput\n                        id='data_schema'\n                        placeholder={\n                          this.props.schema ? JSON.parse(this.props.schema) : {}\n                        }\n                        locale={locale}\n                        height='550px'\n                        onChange={(data: any) => this.updateSchema(data.json)}\n                      />\n                    </ErrorBoundary>\n                    <br />\n                  </div>\n                  <div\n                    style={{ margin: '1em', width: '50em' }}\n                    className='editor-container'\n                  >\n                    <ErrorBoundary\n                      onErr={(err: string) => {\n                        // if rendering initial value causes a crash\n                        // eslint-disable-next-line no-console\n                        console.error(err);\n                        this.updateUISchema('{}');\n                      }}\n                      errMessage={'Error parsing JSON UI Schema input'}\n                    >\n                      <h4>UI Schema</h4>\n                      <JSONInput\n                        id='ui_schema'\n                        placeholder={\n                          this.props.uischema\n                            ? JSON.parse(this.props.uischema)\n                            : {}\n                        }\n                        locale={locale}\n                        height='550px'\n                        onChange={(data: any) => this.updateUISchema(data.json)}\n                      />\n                    </ErrorBoundary>\n                  </div>\n                </div>\n              ),\n            },\n            {\n              name: 'Pre-Configured Components',\n              id: 'pre-configured',\n              content: (\n                <div\n                  className='tab-pane'\n                  style={{\n                    height: this.props.height ? this.props.height : '500px',\n                  }}\n                >\n                  <ErrorBoundary onErr={() => {}}>\n                    <PredefinedGallery\n                      schema={this.props.schema}\n                      uischema={this.props.uischema}\n                      mods={this.props.mods}\n                      onChange={(newSchema: string, newUiSchema: string) => {\n                        if (this.props.onChange)\n                          this.props.onChange(newSchema, newUiSchema);\n                      }}\n                    />\n                  </ErrorBoundary>\n                </div>\n              ),\n            },\n          ]}\n        />\n      </div>\n    );\n  }\n}\n\nexport default JsonSchemaFormEditor;\n","// @flow\n\nimport React from 'react';\n\nimport JsonSchemaFormSuite from './JsonSchemaFormSuite';\nimport { createUseStyles } from 'react-jss';\n\nconst useStyles = createUseStyles({\n  header: {\n    '& h1': {\n      textAlign: 'center',\n      margin: '1em',\n    },\n    '& p': {\n      marginRight: '5em',\n      marginLeft: '5em',\n    },\n  },\n});\n\n// Can be used to set initial schemas and mods (useful for development)\nconst initialJsonSchema = {};\nconst initialUiSchema = {};\nconst mods = {};\n\nexport default function PlaygroundContainer({ title }: { title: string }) {\n  const [schema, setSchema] = React.useState(JSON.stringify(initialJsonSchema));\n  const [uischema, setUischema] = React.useState(\n    JSON.stringify(initialUiSchema),\n  );\n  const classes = useStyles();\n  return (\n    <div className='playground'>\n      <div className={classes.header}>\n        <h1>{title}</h1>\n        <p>\n          Demo app for the{' '}\n          <a href='https://github.com/ginkgobioworks/react-json-schema-form-builder'>\n            React JSON Schema Form Builder\n          </a>\n          , which allows a user to visually build a form and obtain the JSON\n          Schema corresponding to it\n        </p>\n        <p>\n          The Visual Form Builder tab corresponds to the actual Form Builder\n          component. This reads in code from the JSON Schema, which is stored\n          and updated live in the \"Edit Schema\" tab, and renders the code as\n          manipulatable form elements. The result of the form is rendered with\n          the material design theme in the Preview Form tab. The Pre-Configured\n          Components tab also demonstrates how the form builder takes advantage\n          of the definitions property of JSON Schema to render definitions.\n        </p>\n      </div>\n      <JsonSchemaFormSuite\n        lang={'json'}\n        schema={schema}\n        uischema={uischema}\n        mods={mods}\n        schemaTitle='Data Schema'\n        uischemaTitle='UI Schema'\n        onChange={(newSchema: string, newUiSchema: string) => {\n          setSchema(newSchema);\n          setUischema(newUiSchema);\n        }}\n        width='95%'\n        height='800px'\n      />\n    </div>\n  );\n}\n","import React from 'react';\nimport PlaygroundContainer from './PlaygroundContainer';\n\nfunction App() {\n  return <PlaygroundContainer title='React JSON Schema Form Builder' />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}